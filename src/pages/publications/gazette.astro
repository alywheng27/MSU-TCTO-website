---
import Layout from '../../layouts/Layout.astro';
import Navbar from "../../components/Navbar";
import MainVideo from "../../components/MainVideo.astro";
import FooterNav from "../../components/FooterNav.astro";
import Footer from "../../components/Footer.astro";
import GazetteTab from "../../components/GazetteTab";
import '../../styles/css/global.css';

const currentPath = Astro.url.pathname;

import { urlForImage } from '../../api/api';

import { getYear } from '../../js/date';
import { getWordMonth } from '../../js/date';
import { get3LettersMonth } from '../../js/date';
import { getDay } from '../../js/date';

import { getLatestGazette } from '../../api/api';
import { getYearGazette } from '../../api/api';
import { getAllGazette } from '../../api/api';

// Fetch data with error handling
const fetchData = async (fetchFunction, fallbackData) => {
  try {
    return await fetchFunction();
  } catch (error) {
    console.error('Error fetching data:', error);
    return fallbackData;
  }
};

const latestGazette = await fetchData(getLatestGazette, {
  title: 'Fallback Title',
  publishedAt: new Date().toISOString(),
  mainImage: { asset: { url: '/fallback-image.jpg' } },
  body: [{ children: [{ text: 'Fallback content' }] }],
});

const yearGazette = await fetchData(getYearGazette, []);

const allGazette = await fetchData(getAllGazette, []);

var x = null;

// State for filtering
const uniqueYears = [...new Set(allGazette.map(gazette => getYear(gazette.publishedAt)))];
const uniqueQuarters = ['All', 'January', 'February', 'March', 'April','May','June','July','August','September','October','November','December'];
---

<Layout title="MSU | Tawi-Tawi College of Technology and Oceanography">
	<main>
		<Navbar path={currentPath} client:visible />

        <div class="pt-[90px] w-full">
            <div class='h-[40px] xl:px-[12.5%] xs:px-[3.85%]'>
                <p class="paragraph p2 py-[10px] text-titanium xl:block xs:hidden">
                    <a href="/home">Home</a> / <a href="/publications">Publications</a> / Gazette
                </p>
            </div>
            
            <div class="xl:pt-[80px]">
                <h3 class="headings xl:h3 xs:h4 text-white-pure text-center xs:mb-[45px]">Gazette</h3>
        
                <div class="flex xl:flex-row xs:flex-col xl:ml-[480px] xl:mt-[80px]">
                    <div class="flex">
                        <img src={ urlForImage(latestGazette.mainImage.asset.url).url() } 
                             class="xl:w-[412px] xl:px-[0%] xs:px-[100px] xl:mr-[68px] xs:mb-[45px]" 
                             alt="Latest Gazette">
                    </div>
        
                    <div class="flex flex-col mt-[20px] xl:text-start xs:text-start">
                        <div class="flex xl:max-w-[480px] xl:px-[47px] xs:px-[124px] xs:justify-center">
                            <h4 class="headings xl:h4 xs:h5 text-white-pure">
                                { getYear(latestGazette.publishedAt) }, { latestGazette.gazetteQuarter.gazetteQuarter }
                            </h4>
                        </div>
        
                        <div class="flex xl:flex-col xs:flex-col xl:max-w-[480px] xs:px-[47px]">
                            <p class="paragraph p2 text-white-pure mt-[40px] xl:max-h-[400px] xs:max-h-[62px] overflow-hidden">
                                { latestGazette.body[0].children[0].text }
                            </p>
                        </div>
        
                        <!-- Download Button -->
                        <div class="flex justify-center xl:justify-start mt-2 xl:px-[135px] xs:px-[124px]">
                            <a href={latestGazette.file.asset.url} target="_blank"
                               download 
                               class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-6 rounded-lg shadow-md transition duration-300">
                               ðŸ“¥Download Gazette
                            </a>
                        </div>
                    </div>
           

                    
                <div class="flex xs:flex-col xs:items-center xs:mt-[48px]  xl:mt-[0px] ">
                    <div class="flex">
                        <p class="paragraph xs:p2 text-white-pure   xl:hidden xs:block">PREVIOUS RELEASES</p>
                    </div> 
                </div>
    
            </div>

           <!-- Global Filter Section -->
<div class="flex flex-col items-center xl:py-[71px] xs:pt-[48px] my-5 w-full">
    <div class="w-full max-w-7xl px-4">
        <p class="paragraph p1 text-white-pure xl:ml-[12px] xl:block xs:hidden mb-6 text-center">
            Filter Previous Releases
        </p>

       <div class="flex flex-wrap gap-4 justify-center">
            <div class="relative w-full sm:w-auto">
                <select id="yearFilter" class="filter-dropdown">
                    <option value="All">All Years</option>
                    {
                        uniqueYears.map(year => (
                            <option value={year}>{year}</option>
                        ))
                    }
                </select>
            </div>

            <div class="relative w-full sm:w-auto">
                <select id="quarterFilter" class="filter-dropdown">
                    {
                        uniqueQuarters.map(gazetteQuarter => (
                            <option value={gazetteQuarter}>{gazetteQuarter}</option>
                        ))
                    }
                </select>
            </div> 

            <!-- Search Input Field -->
        
            <div class="relative w-full ">
                <input type="text" id="searchFilter" class="filter-dropdown" placeholder="Search Gazette" />
            </div>
        </div>
 <br>
                    <!-- Gazette Cards Grid -->
                    <div id="gazetteGrid" class="grid xl:grid-cols-3 lg:grid-cols-2 md:grid-cols-1 gap-8 w-full">
                        {
                            allGazette.map((gaz: {
                                title: unknown;
                                publishedAt: unknown;
                                mainImage: {
                                    asset: {
                                        url: string;
                                    };
                                };
                                file: {
                                    asset: {
                                        url: string;
                                    }
                                };
                                body: [
                                    {
                                        children: [
                                            {
                                                text: unknown;
                                            }
                                        ]
                                    }
                                ];
                                gazetteQuarter: {
                                    gazetteQuarter: string;
                                };
                            }, index) => {
                                return (
                                    <div class="gazette-item bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300" data-year={getYear(gaz.publishedAt)} data-quarter={gaz.gazetteQuarter.gazetteQuarter} data-title={gaz.title} data-content={gaz.body[0].children[0].text}>
                                        <a href={ gaz.file.asset.url } target="_blank">
                                            <img src={ gaz.mainImage.asset.url } class="w-full h-49 object-cover" alt={ gaz.title } />
                                        </a>
                                        <div class="p-6">
                                            <h4 class="headings h5 text-gray-900 mb-2">{ gaz.title }</h4>
                                            <p class="paragraph p2 text-gray-600 mb-4">
                                                { gaz.body[0].children[0].text }
                                            </p>
                                            <div class="flex items-center justify-between">
                                                <p class="paragraph p2 text-gray-500">{ getYear(gaz.publishedAt) }</p>
                                                <a href={ gaz.file.asset.url } target="_blank" class="text-blue-500 hover:text-blue-700 transition-colors duration-300">
                                                    Read More â†’
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                );
                            })
                        }
                    </div>

                    <!-- Pagination -->
                    <div class="flex justify-center mt-10">
                        <div id="pagination" class="flex items-center space-x-2">
                            <!-- Previous Button -->
                            <button id="prevPage" class="px-4 py-2 bg-gray-200 rounded-full hover:bg-blue-500 hover:text-white transition-all disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                                &larr; Prev
                            </button>

                            <!-- Page Numbers -->
                            <div id="pageNumbers" class="flex items-center space-x-2">
                                <!-- Page numbers will be dynamically inserted here -->
                            </div>

                            <!-- Next Button -->
                            <button id="nextPage" class="px-4 py-2 bg-gray-200 rounded-full hover:bg-blue-500 hover:text-white transition-all disabled:opacity-50 disabled:cursor-not-allowed">
                                Next &rarr;
                            </button>
                        </div>
                    </div>
                </div>
            </div>

<!-- fold Main video -->
    <MainVideo />
<!-- end Main video -->

<!-- FooterNaV -->
        <FooterNav />
<!-- end FooterNaV -->

<!-- Footer -->
		<Footer />
<!-- end Footer -->
                    
        </div>
    </main>
</Layout>

<script >
// Client-side filtering and pagination logic
document.addEventListener('DOMContentLoaded', () => {
    const itemsPerPage = 6; // Number of items per page
    const gazetteGrid = document.getElementById('gazetteGrid');
    const allGazetteItems = Array.from(gazetteGrid.querySelectorAll('.gazette-item'));
    const yearFilter = document.getElementById('yearFilter');
    const quarterFilter = document.getElementById('quarterFilter');
    const searchFilter = document.getElementById('searchFilter');
    const prevPageButton = document.getElementById('prevPage');
    const nextPageButton = document.getElementById('nextPage');
    const pageNumbersContainer = document.getElementById('pageNumbers');

    let currentPage = 1;
    let filteredItems = allGazetteItems;

    // Function to filter items based on search query and filters
    function filterItems() {
        const selectedYear = yearFilter.value.toLowerCase();
        const selectedQuarter = quarterFilter.value.toLowerCase();
        const searchQuery = searchFilter.value.toLowerCase();

        filteredItems = allGazetteItems.filter(item => {
            const year = item.getAttribute('data-year').toLowerCase();
            const quarter = item.getAttribute('data-quarter').toLowerCase();
            const title = item.getAttribute('data-title').toLowerCase();
            const content = item.getAttribute('data-content').toLowerCase();

            // Ensure all conditions are met
            const yearMatch = selectedYear === 'all' || year === selectedYear;
            const quarterMatch = selectedQuarter === 'all' || quarter === selectedQuarter;
            const searchMatch = title.includes(searchQuery) || content.includes(searchQuery);

            return yearMatch && quarterMatch && searchMatch;
        });

        currentPage = 1;
        renderPagination();
        changePage(currentPage);
    }

    // Function to render page numbers
    function renderPagination() {
        const totalPages = Math.ceil(filteredItems.length / itemsPerPage);
        pageNumbersContainer.innerHTML = '';

        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.className = `px-4 py-2 rounded-full transition-all ${
                currentPage === i ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-blue-500 hover:text-white'
            }`;
            pageButton.textContent = i;
            pageButton.addEventListener('click', () => changePage(i));
            pageNumbersContainer.appendChild(pageButton);
        }

        prevPageButton.disabled = currentPage === 1;
        nextPageButton.disabled = currentPage === totalPages;
    }

    // Function to change page
    function changePage(page) {
        currentPage = page;
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;

        allGazetteItems.forEach((item) => {
            item.style.display = 'none'; // Hide all items initially
        });

        filteredItems.slice(startIndex, endIndex).forEach((item) => {
            item.style.display = 'block'; // Show items for the current page
        });

        renderPagination();
    }

    // Event listeners for filters and search
    yearFilter.addEventListener('change', filterItems);
    quarterFilter.addEventListener('change', filterItems);
    searchFilter.addEventListener('input', filterItems);

    // Event listeners for previous and next buttons
    prevPageButton.addEventListener('click', () => {
        if (currentPage > 1) changePage(currentPage - 1);
    });

    nextPageButton.addEventListener('click', () => {
        if (currentPage < Math.ceil(filteredItems.length / itemsPerPage)) changePage(currentPage + 1);
    });

    // Initial render
    filterItems();
});
</script>