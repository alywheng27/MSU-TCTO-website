---
import Layout from '../../layouts/Layout.astro';
import Navbar from "../../components/Navbar";
import MainVideo from "../../components/MainVideo.astro";
import FooterNav from "../../components/FooterNav.astro";
import Footer from "../../components/Footer.astro";
import GazetteTab from "../../components/GazetteTab";
import '../../styles/css/global.css';
import '../../styles/css/globalanimate.css';
import '../../styles/css/pdf-viewer.css';

const currentPath = Astro.url.pathname;

import { urlForImage, urlForPDF } from '../../api/api';

import { getYear } from '../../js/date';
import { getWordMonth } from '../../js/date';
import { get3LettersMonth } from '../../js/date';
import { getDay } from '../../js/date';

import { getLatestSulimbang } from '../../api/api';
import { getYearSulimbang } from '../../api/api';
import { getallSulimbang } from '../../api/api';

const latestsulimbang = await getLatestSulimbang();
const yearSulimbang = await getYearSulimbang();
const allsulimbang = await getallSulimbang();

// Debug logging
console.log('Latest Sulimbang data:', latestsulimbang);
console.log('All Sulimbang data:', allsulimbang);

// Ensure data is available
if (!latestsulimbang || !allsulimbang) {
    throw new Error("Failed to fetch Sulimbang data.");
}

// Generate PDF URLs
const latestPdfUrl = urlForPDF(latestsulimbang.file);
const latestOriginalUrl = latestsulimbang.file?.asset?.url || '';
const allPdfUrls = allsulimbang.map(sulimbang => ({
    ...sulimbang,
    pdfUrl: urlForPDF(sulimbang.file),
    originalUrl: sulimbang.file?.asset?.url || ''
}));
---

<Layout title="MSU | Tawi-Tawi College of Technology and Oceanography">
    <main class="bg-white dark:bg-gray-900">
        <Navbar path={currentPath} client:visible />
        
        <!-- Mobile-Optimized Full-Screen PDF Viewer Modal -->
        <div id="pdfViewerModal" class="fixed inset-0 z-[9999] bg-black/95 backdrop-blur-md hidden">
            <div class="w-full h-full">
                <div class="bg-white dark:bg-gray-800 w-full h-full flex flex-col overflow-hidden">
                    <!-- Mobile-Optimized Header -->
                    <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between p-3 sm:p-6 bg-gradient-to-r from-msu-blue dark:from-yellow-500 via-msu-dark-blue dark:via-yellow-600 to-msu-blue dark:to-yellow-500 text-white shadow-lg">
                        <div class="flex items-center space-x-2 sm:space-x-4 w-full sm:w-auto mb-3 sm:mb-0">
                            <div class="flex items-center justify-center w-10 h-10 sm:w-14 sm:h-14 bg-white/20 rounded-xl backdrop-blur-sm">
                                <svg class="w-5 h-5 sm:w-7 sm:h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                </svg>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h3 id="modalPdfTitle" class="text-sm sm:text-2xl font-bold text-white truncate">MSU-TCTO Publication Viewer</h3>
                                <p class="text-white/90 text-xs sm:text-sm font-medium hidden sm:block">Professional PDF Document Viewer</p>
                            </div>
                        </div>
                        
                        <!-- Mobile-Optimized Controls -->
                        <div class="flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 w-full sm:w-auto">
                            <!-- Zoom Controls - Stacked on mobile -->
                            <div class="flex items-center justify-center space-x-1 sm:space-x-2 bg-msu-deep-ocean/20 dark:bg-yellow-500/20 rounded-xl px-2 sm:px-4 py-2 backdrop-blur-sm border border-msu-deep-ocean/30 dark:border-yellow-500/30">
                                <button id="zoomOut" class="flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 bg-msu-deep-ocean/30 dark:bg-yellow-500/30 hover:bg-msu-deep-ocean/50 dark:hover:bg-yellow-500/50 text-white rounded-lg transition-all duration-200 hover:scale-105 border border-msu-deep-ocean/40 dark:border-yellow-500/40" title="Zoom Out">
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                                    </svg>
                                </button>
                                <span id="zoomLevel" class="text-white text-xs sm:text-sm font-bold min-w-[3rem] sm:min-w-[4rem] text-center px-2 sm:px-3 py-1 bg-msu-deep-ocean/20 dark:bg-yellow-500/20 rounded-lg border border-msu-deep-ocean/30 dark:border-yellow-500/30">100%</span>
                                <button id="zoomIn" class="flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 bg-msu-deep-ocean/30 dark:bg-yellow-500/30 hover:bg-msu-deep-ocean/50 dark:hover:bg-yellow-500/50 text-white rounded-lg transition-all duration-200 hover:scale-105 border border-msu-deep-ocean/40 dark:border-yellow-500/40" title="Zoom In">
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                    </svg>
                                </button>
                                <button id="zoomFit" class="flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 bg-msu-deep-ocean/30 dark:bg-yellow-500/30 hover:bg-msu-deep-ocean/50 dark:hover:bg-yellow-500/50 text-white rounded-lg transition-all duration-200 hover:scale-105 border border-msu-deep-ocean/40 dark:border-yellow-500/40" title="Fit to Screen">
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
                                    </svg>
                                </button>
                            </div>
                            
                            <!-- Page Navigation - Responsive -->
                            <div class="flex items-center justify-center space-x-1 sm:space-x-2 bg-msu-deep-ocean/20 dark:bg-yellow-500/20 rounded-xl px-2 sm:px-4 py-2 backdrop-blur-sm border border-msu-deep-ocean/30 dark:border-yellow-500/30">
                                <button id="pdfPrevPage" class="flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 bg-msu-deep-ocean/30 dark:bg-yellow-500/30 hover:bg-msu-deep-ocean/50 dark:hover:bg-yellow-500/50 text-white rounded-lg transition-all duration-200 hover:scale-105 border border-msu-deep-ocean/40 dark:border-yellow-500/40">
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                                    </svg>
                                </button>
                                <span id="pageInfo" class="text-white text-xs sm:text-sm font-bold min-w-[3rem] sm:min-w-[5rem] text-center px-2 sm:px-3 py-1 bg-msu-deep-ocean/20 dark:bg-yellow-500/20 rounded-lg border border-msu-deep-ocean/30 dark:border-yellow-500/30">1 / 1</span>
                                <button id="pdfNextPage" class="flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 bg-msu-deep-ocean/30 dark:bg-yellow-500/30 hover:bg-msu-deep-ocean/50 dark:hover:bg-yellow-500/50 text-white rounded-lg transition-all duration-200 hover:scale-105 border border-msu-deep-ocean/40 dark:border-yellow-500/40">
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                    </svg>
                                </button>
                            </div>
                            
                            <!-- Action Buttons - Responsive -->
                            <div class="flex items-center justify-center space-x-2 sm:space-x-3">
                                <button onclick="openPdfInNewTab()" class="flex items-center justify-center space-x-1 sm:space-x-2 bg-msu-deep-ocean/30 dark:bg-yellow-500/30 hover:bg-msu-deep-ocean/50 dark:hover:bg-yellow-500/50 text-white px-2 sm:px-4 py-2 rounded-lg transition-all duration-200 hover:scale-105 backdrop-blur-sm border border-msu-deep-ocean/40 dark:border-yellow-500/40">
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                    </svg>
                                    <span class="text-xs sm:text-sm font-medium hidden sm:inline">Open</span>
                                </button>
                                <button onclick="downloadPdf()" class="flex items-center justify-center space-x-1 sm:space-x-2 bg-msu-deep-ocean/30 dark:bg-yellow-500/30 hover:bg-msu-deep-ocean/50 dark:hover:bg-yellow-500/50 text-white px-2 sm:px-4 py-2 rounded-lg transition-all duration-200 hover:scale-105 backdrop-blur-sm border border-msu-deep-ocean/40 dark:border-yellow-500/40">
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                                    </svg>
                                    <span class="text-xs sm:text-sm font-medium hidden sm:inline">Download</span>
                                </button>
                                <button onclick="closePdfViewer()" class="flex items-center justify-center w-10 h-10 sm:w-12 sm:h-12 bg-msu-deep-ocean/30 dark:bg-yellow-500/30 hover:bg-msu-deep-ocean/50 dark:hover:bg-yellow-500/50 text-white rounded-xl transition-all duration-200 hover:scale-105 backdrop-blur-sm border border-msu-deep-ocean/40 dark:border-yellow-500/40">
                                    <svg class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Mobile-Optimized PDF Viewer Content -->
                    <div class="flex-1 bg-gradient-to-br from-gray-50 dark:from-gray-800 to-gray-100 dark:to-gray-900 relative overflow-hidden">
                        <!-- Mobile-Optimized Loading State -->
                        <div id="pdfLoading" class="absolute inset-0 flex items-center justify-center bg-white/98 dark:bg-gray-900/98 backdrop-blur-sm z-20">
                            <div class="text-center max-w-xs sm:max-w-sm mx-auto p-4 sm:p-8">
                                <div class="relative mb-4 sm:mb-8">
                                    <!-- Responsive loading ring -->
                                    <div class="animate-spin rounded-full h-16 w-16 sm:h-24 sm:w-24 border-4 border-blue-100 border-t-blue-600 mx-auto"></div>
                                    <div class="absolute inset-1 sm:inset-2 rounded-full h-14 w-14 sm:h-20 sm:w-20 border-4 border-transparent border-t-blue-400 animate-spin mx-auto" style="animation-duration: 1.5s; animation-direction: reverse;"></div>
                                    <div class="absolute inset-4 sm:inset-6 rounded-full h-8 w-8 sm:h-12 sm:w-12 bg-blue-600/20 animate-pulse mx-auto"></div>
                                    <div class="absolute inset-6 sm:inset-10 rounded-full h-4 w-4 bg-blue-600 mx-auto animate-ping"></div>
                                </div>
                                
                                <div class="space-y-2 sm:space-y-3">
                                    <h3 class="text-lg sm:text-xl font-bold text-gray-800 dark:text-yellow-400 animate-pulse">Loading PDF...</h3>
                                    <p class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed">Please wait while we prepare your document</p>
                                    
                                    <div class="flex justify-center space-x-2 mt-4">
                                        <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style="animation-delay: 0ms;"></div>
                                        <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style="animation-delay: 150ms;"></div>
                                        <div class="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style="animation-delay: 300ms;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Mobile-Optimized PDF Container -->
                        <div id="pdfContainer" class="w-full h-full overflow-auto bg-gradient-to-br from-gray-50 dark:from-gray-800 to-gray-100 dark:to-gray-900">
                            <div id="pdfViewer" class="w-full h-full flex items-center justify-center p-2 sm:p-4 relative">
                                <div id="pdfCanvasContainer" class="relative perspective-1000 w-full h-full flex items-center justify-center">
                                    <div id="pageFlipContainer" class="relative transform-style-preserve-3d transition-transform duration-700 ease-in-out">
                                        <div id="currentPageContainer" class="flex items-center justify-center w-full h-full backface-hidden">
                                            <!-- PDF canvas will be inserted here -->
                                        </div>
                                        <div id="nextPageContainer" class="flex items-center justify-center w-full h-full backface-hidden transform rotateY-180 opacity-0 absolute inset-0">
                                            <!-- Next page canvas will be inserted here during animation -->
                                        </div>
                                    </div>
                                </div>
                                
                                <div id="pageTurnShadow" class="absolute inset-0 pointer-events-none opacity-0 transition-opacity duration-700">
                                    <div class="absolute right-0 top-0 bottom-0 w-16 sm:w-32 bg-gradient-to-l from-black/20 to-transparent"></div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Mobile-Optimized Error State -->
                        <div id="pdfError" class="absolute inset-0 flex items-center justify-center bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm z-20 hidden">
                            <div class="text-center max-w-xs sm:max-w-lg mx-auto p-4 sm:p-8">
                                <div class="w-20 h-20 sm:w-32 sm:h-32 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4 sm:mb-8">
                                    <svg class="w-10 h-10 sm:w-16 sm:h-16 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                                    </svg>
                                </div>
                                <h3 class="text-xl sm:text-3xl font-bold text-gray-800 dark:text-yellow-400 mb-3 sm:mb-4">Unable to Load PDF</h3>
                                <p class="text-gray-600 dark:text-gray-300 mb-6 sm:mb-8 leading-relaxed text-sm sm:text-lg">
                                    The PDF file could not be loaded. This might be due to browser restrictions.
                                </p>
                                <div class="flex flex-col space-y-3 sm:space-y-4">
                                    <button onclick="openPdfInNewTab()" class="flex items-center justify-center space-x-2 sm:space-x-3 bg-blue-600 dark:bg-blue-500 hover:bg-blue-700 dark:hover:bg-blue-600 text-white px-6 sm:px-8 py-3 sm:py-4 rounded-xl font-semibold transition-all duration-200 hover:scale-105 shadow-lg text-sm sm:text-base">
                                        <svg class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                        </svg>
                                        <span>Open in New Tab</span>
                                    </button>
                                    <button onclick="downloadPdf()" class="flex items-center justify-center space-x-2 sm:space-x-3 bg-green-600 dark:bg-green-500 hover:bg-green-700 dark:hover:bg-green-600 text-white px-6 sm:px-8 py-3 sm:py-4 rounded-xl font-semibold transition-all duration-200 hover:scale-105 shadow-lg text-sm sm:text-base">
                                        <svg class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                                        </svg>
                                        <span>Download PDF</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Mobile-Optimized Hero Section -->
        <div class="relative pt-16 sm:pt-20 lg:pt-24 pb-8 sm:pb-12 lg:pb-16 bg-white dark:bg-gray-900">
            <div class="absolute inset-0 overflow-hidden">
                <div class="absolute inset-0 bg-gradient-to-r from-msu-light-blue/10 to-white"></div>
                <div class="absolute top-0 right-0 w-1/2 h-full bg-msu-blue/5 -skew-x-12 transform origin-top-right"></div>
            </div>
            
            <div class="container mx-auto px-4 xl:px-0 relative">
                <!-- Mobile-Optimized Breadcrumb -->
                <div class="mb-4 sm:mb-6 lg:mb-8">
                    <p class="paragraph p2 text-gray-600 dark:text-gray-300 text-sm sm:text-base">
                        <a href="/home" class="hover:text-msu-blue dark:hover:text-yellow-400 transition-colors">Home</a> / 
                        <a href="/publications" class="hover:text-msu-blue dark:hover:text-yellow-400 transition-colors">Publications</a> / 
                        <span class="text-msu-blue dark:text-yellow-400 font-medium">Sulimbang</span>
                    </p>
                </div>

                <!-- Mobile-Optimized Hero Content -->
                <div class="text-center mb-8 sm:mb-12 lg:mb-16">
                    <h1 class="headings text-3xl sm:text-4xl lg:text-5xl font-bold text-msu-main-color dark:text-yellow-400 mb-4 sm:mb-6">Sulimbang</h1>
                    <div class="w-16 sm:w-20 lg:w-24 h-1 sm:h-1.5 bg-msu-deep-ocean dark:bg-yellow-400 mx-auto mb-4 sm:mb-6"></div>
                    <p class="paragraph p2 text-gray-600 dark:text-gray-300 max-w-3xl mx-auto text-base sm:text-lg px-4 sm:px-0">
                        Official publications of MSU Tawi-Tawi College of Technology and Oceanography
                    </p>
                </div>
            </div>
        </div>

        <!-- Mobile-Optimized Latest Publication Section -->
        <div class="py-8 sm:py-12 lg:py-16 bg-gray-50 dark:bg-gray-800 border-t border-b border-gray-100 dark:border-gray-700">
            <div class="container mx-auto px-4 xl:px-0">
                <div class="flex flex-col lg:flex-row gap-6 sm:gap-8 lg:gap-12 items-center">
                    <!-- Mobile-Optimized Publication Cover -->
                    <div class="w-full lg:w-1/2">
                        <div class="relative group overflow-hidden rounded-xl shadow-xl max-w-md mx-auto lg:max-w-none">
                            <img
                                src={urlForImage(latestsulimbang.mainImage.asset.url).url()}
                                class="w-full h-auto object-cover transform transition-all duration-500 group-hover:scale-105"
                                alt={latestsulimbang.title}
                            />
                            <div class="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity  duration-300 flex items-end p-4 sm:p-6 lg:p-8">
                                <h3 class="text-lg sm:text-xl lg:text-2xl font-bold text-white ">{latestsulimbang.title}</h3>
                            </div>
                            <div class="absolute top-2 sm:top-4 right-2 sm:right-4 bg-msu-main-color text-white font-bold px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm">
                                Latest Issue
                            </div>
                        </div>
                    </div>

                    <!-- Mobile-Optimized Publication Details -->
                    <div class="w-full lg:w-1/2">
                        <div class="bg-white dark:bg-gray-800 p-4 sm:p-6 lg:p-8 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700">
                            <h2 class="headings text-xl sm:text-2xl lg:text-3xl font-bold text-msu-main-color dark:text-yellow-400 mb-3 sm:mb-4">{latestsulimbang.title}</h2>
                            <div class="flex items-center mb-4 sm:mb-6">
                                <span class="bg-msu-blue/10 dark:bg-gray-700 text-msu-main-color dark:text-yellow-400 px-3 py-1 rounded-full text-sm font-medium">
                                    {getYear(latestsulimbang.publishedAt)}
                                </span>
                            </div>
                            <p class="paragraph p2 text-gray-600 dark:text-gray-300 mb-6 sm:mb-8 leading-relaxed text-sm sm:text-base">
                                {latestsulimbang.body[0].children[0].text}
                            </p>
                            <div class="flex flex-col sm:flex-row flex-wrap gap-3 sm:gap-4">
                                <button
                                    id="viewLatestPDF"
                                    data-pdf-url={latestPdfUrl || ''}
                                    data-title={latestsulimbang.title}
                                    class="inline-flex items-center justify-center bg-msu-main-color dark:bg-yellow-600 hover:bg-msu-deep-ocean dark:hover:bg-yellow-700 text-white font-bold py-2.5 sm:py-3 px-4 sm:px-6 rounded-lg shadow-md transform transition-all duration-300 hover:scale-[1.02] text-sm sm:text-base"
                                >
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                    </svg>
                                    View PDF
                                </button>
                                <a
                                    href={latestPdfUrl || '#'} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    class="inline-flex items-center justify-center bg-msu-blue dark:bg-yellow-600 hover:bg-msu-deep-ocean dark:hover:bg-yellow-700 text-white font-bold py-2.5 sm:py-3 px-4 sm:px-6 rounded-lg shadow-md transform transition-all duration-300 hover:scale-[1.02] text-sm sm:text-base"
                                >
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                    </svg>
                                    Open
                                </a>
                                <a
                                    href={latestPdfUrl || '#'} 
                                    target="_blank" 
                                    rel="noopener noreferrer"
                                    download
                                    class="inline-flex items-center justify-center bg-white dark:bg-gray-700 border border-msu-blue dark:border-yellow-400 text-msu-main-color dark:text-yellow-400 hover:bg-msu-blue/5 dark:hover:bg-yellow-400/10 font-medium py-2.5 sm:py-3 px-4 sm:px-6 rounded-lg shadow-sm transform transition-all duration-300 hover:scale-[1.02] text-sm sm:text-base"
                                >
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                                    </svg>
                                    Download
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Mobile-Optimized Publication Archive Section -->
        <div class="py-8 sm:py-12 lg:py-16 bg-white dark:bg-gray-900">
            <div class="container mx-auto px-4 xl:px-0">
                <!-- Mobile-Optimized Search and Filter -->
                <div class="mb-8 sm:mb-12 lg:mb-16 max-w-4xl mx-auto">
                    <div class="relative">
                        <input
                            type="text"
                            id="searchInput"
                            placeholder="Search Sulimbang..."
                            class="w-full p-3 sm:p-4 pl-10 sm:pl-12 pr-4 sm:pr-6 border border-gray-200 dark:border-gray-600 rounded-xl shadow-sm focus:ring-2 focus:ring-msu-gold dark:focus:ring-yellow-500 focus:border-msu-gold dark:focus:border-yellow-500 outline-none transition-all duration-300 text-sm sm:text-base bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 dark:placeholder-gray-400"
                        />
                        <svg class="absolute left-3 sm:left-4 top-3 sm:top-4 w-4 h-4 sm:w-5 sm:h-5 text-gray-400 dark:text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                </div>

                <!-- Mobile-Optimized Section Header -->
                <div class="text-center mb-8 sm:mb-10 lg:mb-12">
                    <h2 class="headings text-2xl sm:text-3xl lg:text-4xl font-bold text-msu-main-color dark:text-yellow-400 mb-3 sm:mb-4">Sulimbang Archive</h2>
                    <div class="w-16 sm:w-20 lg:w-24 h-1 sm:h-1.5 bg-msu-deep-ocean dark:bg-yellow-400 mx-auto"></div>
                </div>

                <!-- Mobile-Optimized Publications Grid -->
                <div id="sulimbangContainer" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 lg:gap-8 mb-8 sm:mb-12 lg:mb-16">
                    {allPdfUrls.map((sulimbang) => (
                        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden border border-gray-100 dark:border-gray-700 hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1">
                            <div class="relative group h-48 sm:h-56 lg:h-64 overflow-hidden">
                                <img 
                                    src={sulimbang.mainImage.asset.url} 
                                    class="w-full h-full object-cover transform transition-all duration-500 group-hover:scale-110"
                                    alt={sulimbang.title}
                                />
                                <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end p-3 sm:p-4">
                                    <button 
                                        class="view-pdf-btn inline-flex items-center justify-center bg-msu-main-color hover:bg-msu-deep-ocean text-white font-medium py-2 px-3 sm:px-4 rounded-lg transition-colors duration-300 text-sm"
                                        data-pdf-url={sulimbang.pdfUrl || ''}
                                        data-title={sulimbang.title}
                                    >
                                        View PDF
                                    </button>
                                </div>
                            </div>
                            <div class="p-4 sm:p-5 lg:p-6">
                                <h3 class="headings text-base sm:text-lg lg:text-xl font-bold text-msu-main-color dark:text-yellow-400 mb-2 line-clamp-2">{sulimbang.title}</h3>
                                <p class="paragraph p2 text-gray-600 dark:text-gray-300 mb-3 sm:mb-4 line-clamp-3 text-sm sm:text-base">{sulimbang.body[0].children[0].text}</p>
                                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2">
                                    <span class="text-sm font-medium text-msu-main-color dark:text-yellow-400">{getYear(sulimbang.publishedAt)}</span>
                                    <div class="flex gap-2 w-full sm:w-auto">
                                        <a 
                                            href={sulimbang.pdfUrl || '#'} 
                                            target="_blank" 
                                            rel="noopener noreferrer"
                                            class="text-xs sm:text-sm font-medium text-msu-main-color dark:text-yellow-400 hover:text-msu-dark-blue dark:hover:text-yellow-300 transition-colors flex items-center flex-1 sm:flex-none justify-center sm:justify-start"
                                        >
                                            Open <svg class="w-3 h-3 sm:w-4 sm:h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path></svg>
                                        </a>
                                        <a 
                                            href={sulimbang.pdfUrl || '#'} 
                                            target="_blank" 
                                            rel="noopener noreferrer"
                                            download
                                            class="text-xs sm:text-sm font-medium text-msu-main-color dark:text-yellow-400 hover:text-msu-dark-blue dark:hover:text-yellow-300 transition-colors flex items-center flex-1 sm:flex-none justify-center sm:justify-start"
                                        >
                                            Download <svg class="w-3 h-3 sm:w-4 sm:h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path></svg>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>

                <!-- Mobile-Optimized Pagination -->
                <div class="flex justify-center">
                    <div id="pagination" class="flex items-center space-x-1 sm:space-x-2">
                        <button id="prevPage" class="w-8 h-8 sm:w-10 sm:h-10 flex items-center justify-center bg-white dark:bg-gray-700 border border-gray-200 dark:border-yellow-400 rounded-full transition-all disabled:opacity-50 disabled:cursor-not-allowed text-xs sm:text-sm text-gray-600 dark:text-yellow-400" style="border-color: #61063B;" onmouseenter="this.style.backgroundColor='#03045e'; this.style.color='#ffffff';" onmouseleave="this.style.backgroundColor='#ffffff'; this.style.color='#6b7280';" disabled>
                            <svg class="w-4 h-4 sm:w-5 sm:h-5 text-gray-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                            </svg>
                        </button>

                        <div id="pageNumbers" class="flex items-center space-x-1 sm:space-x-2">
                            <!-- Page numbers will be dynamically inserted here -->
                        </div>

                        <button id="nextPage" class="w-8 h-8 sm:w-10 sm:h-10 flex items-center justify-center bg-white dark:bg-gray-700 border border-gray-200 dark:border-yellow-400 rounded-full transition-all disabled:opacity-50 disabled:cursor-not-allowed text-xs sm:text-sm text-gray-600 dark:text-yellow-400" style="border-color: #61063B;" onmouseenter="this.style.backgroundColor='#03045e'; this.style.color='#ffffff';" onmouseleave="this.style.backgroundColor='#ffffff'; this.style.color='#6b7280';">
                            <svg class="w-4 h-4 sm:w-5 sm:h-5 text-gray-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer Components -->
        <FooterNav />
        <Footer />

        <!-- Mobile-Optimized Scroll to Top Button -->
        <button class="scroll-to-top fixed bottom-4 right-4 w-12 h-12 bg-msu-blue dark:bg-yellow-600 hover:bg-msu-deep-ocean dark:hover:bg-yellow-700 text-white rounded-full shadow-lg transition-all duration-300 hover:scale-105 z-50" aria-label="Scroll to top">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6 mx-auto">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
            </svg>
        </button>

        <!-- Enhanced Mobile-Optimized PDF Viewer Script -->
        <script>
            // TypeScript declarations for PDF.js
            declare const pdfjsLib: any;
            
            // Global variables for PDF viewer
            let currentPdfUrl = '';
            let currentPdfTitle = '';
            let pdfDoc: any = null;
            let pageNum = 1;
            let pageRendering = false;
            let pageNumPending: number | null = null;
            let scale = 1.0;
            let canvas: HTMLCanvasElement | null = null;
            let ctx: CanvasRenderingContext2D | null = null;
            let nextCanvas: HTMLCanvasElement | null = null;
            let nextCtx: CanvasRenderingContext2D | null = null;
            let isAnimating = false;
            let baseScale = 1.0; // Base scale for fit-to-screen

            // Professional PDF Viewer functions
            async function openPdfViewer(pdfUrl: string, title: string) {
                console.log('Opening professional PDF viewer:', { pdfUrl, title });
                
                // Check if PDF URL is valid
                if (!pdfUrl || pdfUrl === '' || pdfUrl === '#') {
                    console.error('Invalid PDF URL:', pdfUrl);
                    alert('PDF file not available for this publication.');
                    return;
                }
                
                // Store current PDF info
                currentPdfUrl = pdfUrl;
                currentPdfTitle = title;
                
                // Open the modal
                const modal = document.getElementById('pdfViewerModal');
                const titleElement = document.getElementById('modalPdfTitle');
                const loadingElement = document.getElementById('pdfLoading');
                const errorElement = document.getElementById('pdfError');
                const pdfViewerElement = document.getElementById('pdfViewer');
                
                if (modal && titleElement) {
                    // Set title - more mobile-friendly truncation
                    const isMobile = window.innerWidth < 640;
                    const maxLength = isMobile ? 25 : 40;
                    const displayTitle = title && title.length > maxLength ? title.substring(0, maxLength) + '...' : title;
                    titleElement.textContent = displayTitle || 'MSU-TCTO Publication Viewer';
                    
                    // Show loading state
                    if (loadingElement) loadingElement.classList.remove('hidden');
                    if (errorElement) errorElement.classList.add('hidden');
                    
                    // Open modal
                    modal.classList.remove('hidden');
                    document.body.style.overflow = 'hidden';
                    
                    // Initialize PDF viewer
                    await initializePdfViewer();
                }
            }

            async function initializePdfViewer() {
                try {
                    // Load PDF.js library dynamically
                    if (typeof pdfjsLib === 'undefined') {
                        await loadPdfJs();
                    }
                    
                    // Set up canvas containers
                    const currentPageContainer = document.getElementById('currentPageContainer');
                    const nextPageContainer = document.getElementById('nextPageContainer');
                    if (!currentPageContainer || !nextPageContainer) return;
                    
                    // Clear previous content
                    currentPageContainer.innerHTML = '';
                    nextPageContainer.innerHTML = '';
                    
                    // Create main canvas
                    canvas = document.createElement('canvas');
                    canvas.id = 'pdfCanvas';
                    canvas.className = 'shadow-lg border border-gray-200 rounded-lg';
                    canvas.style.maxWidth = '100%';
                    canvas.style.maxHeight = '100%';
                    canvas.style.width = 'auto';
                    canvas.style.height = 'auto';
                    ctx = canvas.getContext('2d');
                    
                    // Create next page canvas for animations
                    nextCanvas = document.createElement('canvas');
                    nextCanvas.id = 'nextPdfCanvas';
                    nextCanvas.className = 'shadow-lg border border-gray-200 rounded-lg';
                    nextCanvas.style.maxWidth = '100%';
                    nextCanvas.style.maxHeight = '100%';
                    nextCanvas.style.width = 'auto';
                    nextCanvas.style.height = 'auto';
                    nextCtx = nextCanvas.getContext('2d');
                    
                    currentPageContainer.appendChild(canvas);
                    nextPageContainer.appendChild(nextCanvas);
                    
                    // Load the PDF
                    const loadingTask = pdfjsLib.getDocument(currentPdfUrl);
                    pdfDoc = await loadingTask.promise;
                    
                    // Update page info
                    updatePageInfo();
                    
                    // Render first page
                    await renderPage(pageNum);
                    
                    // Hide loading
                    const loadingElement = document.getElementById('pdfLoading');
                    if (loadingElement) loadingElement.classList.add('hidden');
                    
                } catch (error) {
                    console.error('Error loading PDF:', error);
                    showPdfError();
                }
            }

            async function loadPdfJs(): Promise<void> {
                return new Promise<void>((resolve, reject) => {
                    // Load PDF.js from CDN
                    const script = document.createElement('script');
                    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js';
                    script.onload = () => {
                        // Set worker path
                        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
                        resolve();
                    };
                    script.onerror = reject;
                    document.head.appendChild(script);
                });
            }

            function updatePageInfo() {
                const pageInfoElement = document.getElementById('pageInfo');
                if (pageInfoElement && pdfDoc) {
                    pageInfoElement.textContent = `${pageNum} / ${pdfDoc.numPages}`;
                }
                
                updateNavigationButtons();
            }

            function updateNavigationButtons() {
                // Update navigation buttons in PDF viewer modal
                const prevButton = document.querySelector('#pdfViewerModal #pdfPrevPage') as HTMLButtonElement;
                const nextButton = document.querySelector('#pdfViewerModal #pdfNextPage') as HTMLButtonElement;
                
                if (prevButton) {
                    prevButton.disabled = pageNum <= 1 || isAnimating;
                    if (prevButton.disabled) {
                        prevButton.classList.add('opacity-50', 'cursor-not-allowed');
                    } else {
                        prevButton.classList.remove('opacity-50', 'cursor-not-allowed');
                    }
                }
                
                if (nextButton) {
                    nextButton.disabled = pageNum >= pdfDoc?.numPages || isAnimating;
                    if (nextButton.disabled) {
                        nextButton.classList.add('opacity-50', 'cursor-not-allowed');
                    } else {
                        nextButton.classList.remove('opacity-50', 'cursor-not-allowed');
                    }
                }
            }

            async function renderPage(num: number) {
                pageRendering = true;
                
                try {
                    const page = await pdfDoc.getPage(num);
                    
                    // Calculate optimal scale to fit the container - Enhanced for mobile
                    const container = document.getElementById('pageFlipContainer');
                    if (container) {
                        const containerRect = container.getBoundingClientRect();
                        const pageViewport = page.getViewport({ scale: 1.0 });
                        
                        // Mobile-optimized padding
                        const isMobile = window.innerWidth < 768;
                        const padding = isMobile ? 20 : 40;
                        
                        // Calculate scale to fit both width and height with padding
                        const scaleX = (containerRect.width - padding) / pageViewport.width;
                        const scaleY = (containerRect.height - padding) / pageViewport.height;
                        const fitScale = Math.min(scaleX, scaleY, isMobile ? 2.0 : 3.0); // Lower max scale for mobile
                        
                        // Set base scale for fit-to-screen if not set
                        if (baseScale === 1.0) {
                            baseScale = fitScale;
                        }
                        
                        const optimalScale = fitScale * scale;
                        
                        const viewport = page.getViewport({ scale: optimalScale });
                        
                        // Set canvas dimensions
                        if (canvas && ctx) {
                            canvas.height = viewport.height;
                            canvas.width = viewport.width;
                            
                            // Render PDF page into canvas context
                            const renderContext = {
                                canvasContext: ctx,
                                viewport: viewport
                            };
                            
                            await page.render(renderContext).promise;
                        }
                    }
                    
                    pageRendering = false;
                    
                    if (pageNumPending !== null) {
                        renderPage(pageNumPending);
                        pageNumPending = null;
                    }
                    
                } catch (error) {
                    console.error('Error rendering page:', error);
                    pageRendering = false;
                }
            }

            function queueRenderPage(num: number) {
                if (pageRendering) {
                    pageNumPending = num;
                } else {
                    renderPage(num);
                }
            }

            async function onPrevPage() {
                console.log('onPrevPage called:', { pageNum, isAnimating, totalPages: pdfDoc?.numPages });
                if (pageNum <= 1 || isAnimating) {
                    console.log('onPrevPage blocked:', { reason: pageNum <= 1 ? 'first page' : 'animating' });
                    return;
                }
                try {
                    await animatePageFlip('prev');
                } catch (error) {
                    console.error('Error in onPrevPage:', error);
                    isAnimating = false;
                    updateNavigationButtons();
                }
            }

            async function onNextPage() {
                console.log('onNextPage called:', { pageNum, isAnimating, totalPages: pdfDoc?.numPages });
                if (pageNum >= pdfDoc?.numPages || isAnimating) {
                    console.log('onNextPage blocked:', { reason: pageNum >= pdfDoc?.numPages ? 'last page' : 'animating' });
                    return;
                }
                try {
                    await animatePageFlip('next');
                } catch (error) {
                    console.error('Error in onNextPage:', error);
                    isAnimating = false;
                    updateNavigationButtons();
                }
            }

            async function animatePageFlip(direction: 'prev' | 'next') {
                console.log('animatePageFlip called:', { direction, isAnimating, pageNum });
                if (isAnimating) {
                    console.log('Animation already in progress, returning');
                    return;
                }
                
                isAnimating = true;
                updateNavigationButtons(); // Disable buttons immediately

                const pageFlipContainer = document.getElementById('pageFlipContainer');
                const nextPageContainer = document.getElementById('nextPageContainer');
                const pageTurnShadow = document.getElementById('pageTurnShadow');
                
                if (!pageFlipContainer || !nextPageContainer || !pageTurnShadow) {
                    isAnimating = false;
                    return;
                }

                // Calculate target page number
                const targetPage = direction === 'next' ? pageNum + 1 : pageNum - 1;
                
                // Play subtle page turn sound effect (optional)
                playPageTurnSound();
                
                // Pre-render the target page on the next canvas
                await renderPageOnCanvas(targetPage, nextCanvas, nextCtx);
                
                // Add page curl effect
                addPageCurlEffect(direction);
                
                // Show shadow effect with animation
                pageTurnShadow.classList.remove('opacity-0');
                pageTurnShadow.classList.add('opacity-100');
                
                // Show next page container with stagger effect
                nextPageContainer.classList.remove('opacity-0');
                nextPageContainer.classList.add('opacity-100');
                
                // Apply sophisticated flip animation
                if (direction === 'next') {
                    pageFlipContainer.style.transform = 'rotateY(-180deg) scale(0.95)';
                } else {
                    pageFlipContainer.style.transform = 'rotateY(180deg) scale(0.95)';
                }
                
                // Wait for animation to complete - Shorter duration for mobile
                const animationDuration = window.innerWidth < 768 ? 500 : 700;
                await new Promise(resolve => setTimeout(resolve, animationDuration));
                
                // Update page number
                pageNum = targetPage;
                
                // Swap canvases - move next page to current
                const currentPageContainer = document.getElementById('currentPageContainer');
                if (currentPageContainer && nextCanvas && canvas && ctx) {
                    // Copy next canvas content to main canvas
                    canvas.width = nextCanvas.width;
                    canvas.height = nextCanvas.height;
                    ctx.drawImage(nextCanvas, 0, 0);
                }
                
                // Reset animation state first
                isAnimating = false;
                console.log('Animation completed, isAnimating set to false');
                
                // Update page info and navigation buttons
                updatePageInfo();
                
                // Reset visual states
                pageFlipContainer.style.transform = 'rotateY(0deg)';
                nextPageContainer.classList.remove('opacity-100');
                nextPageContainer.classList.add('opacity-0');
                pageTurnShadow.classList.remove('opacity-100');
                pageTurnShadow.classList.add('opacity-0');
                
                // Safety timeout to ensure buttons are re-enabled
                setTimeout(() => {
                    if (isAnimating) {
                        console.warn('Animation state stuck, forcing reset');
                        isAnimating = false;
                        updateNavigationButtons();
                    }
                }, 1000);
            }

            async function renderPageOnCanvas(pageNumber: number, targetCanvas: HTMLCanvasElement | null, targetCtx: CanvasRenderingContext2D | null) {
                if (!pdfDoc || !targetCanvas || !targetCtx) return;
                
                try {
                    const page = await pdfDoc.getPage(pageNumber);
                    
                    // Calculate optimal scale to fit the container
                    const container = document.getElementById('pageFlipContainer');
                    if (container) {
                        const containerRect = container.getBoundingClientRect();
                        const pageViewport = page.getViewport({ scale: 1.0 });
                        
                        // Mobile-optimized padding
                        const isMobile = window.innerWidth < 768;
                        const padding = isMobile ? 20 : 40;
                        
                        // Calculate scale to fit both width and height with padding
                        const scaleX = (containerRect.width - padding) / pageViewport.width;
                        const scaleY = (containerRect.height - padding) / pageViewport.height;
                        const optimalScale = Math.min(scaleX, scaleY, isMobile ? 1.5 : 2.0) * scale; // Lower max scale for mobile
                        
                        const viewport = page.getViewport({ scale: optimalScale });
                        
                        // Set canvas dimensions
                        targetCanvas.height = viewport.height;
                        targetCanvas.width = viewport.width;
                        
                        // Render PDF page into canvas context
                        const renderContext = {
                            canvasContext: targetCtx,
                            viewport: viewport
                        };
                        
                        await page.render(renderContext).promise;
                    }
                } catch (error) {
                    console.error('Error rendering page:', error);
                }
            }

            function playPageTurnSound() {
                // Create a subtle audio context for page turn sound
                try {
                    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
                    const oscillator = audioContext.createOscillator();
                    const gainNode = audioContext.createGain();
                    
                    oscillator.connect(gainNode);
                    gainNode.connect(audioContext.destination);
                    
                    oscillator.frequency.setValueAtTime(200, audioContext.currentTime);
                    oscillator.frequency.exponentialRampToValueAtTime(100, audioContext.currentTime + 0.1);
                    
                    gainNode.gain.setValueAtTime(0.02, audioContext.currentTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.1);
                    
                    oscillator.type = 'sine';
                    oscillator.start(audioContext.currentTime);
                    oscillator.stop(audioContext.currentTime + 0.1);
                } catch (error) {
                    // Silently fail if audio context is not supported
                }
            }

            function addPageCurlEffect(direction: 'prev' | 'next') {
                const pdfContainer = document.getElementById('pdfContainer');
                if (!pdfContainer) return;
                
                // Add temporary curl effect class
                pdfContainer.classList.add('page-curling');
                
                // Remove curl effect after animation - Shorter for mobile
                const duration = window.innerWidth < 768 ? 500 : 700;
                setTimeout(() => {
                    pdfContainer.classList.remove('page-curling');
                }, duration);
            }

            function zoomFit() {
                if (!pdfDoc) return;
                
                // Reset to fit-to-screen scale
                scale = 1.0;  // Reset to base scale calculation
                baseScale = 1.0; // Reset base scale to recalculate
                renderPage(pageNum);
                updateZoomLevel();
                updateNavigationButtons();
            }

            async function zoomIn() {
                if (isAnimating) return;
                const zoomFactor = window.innerWidth < 768 ? 1.2 : 1.25; // Smaller increments for mobile
                scale *= zoomFactor;
                await renderPage(pageNum);
                updateZoomLevel();
                updateNavigationButtons();
            }

            async function zoomOut() {
                if (isAnimating) return;
                const zoomFactor = window.innerWidth < 768 ? 1.2 : 1.25; // Smaller increments for mobile
                scale /= zoomFactor;
                if (scale < 0.3) scale = 0.3; // Lower minimum for mobile viewing
                await renderPage(pageNum);
                updateZoomLevel();
                updateNavigationButtons();
            }

            function updateZoomLevel() {
                const zoomElement = document.getElementById('zoomLevel');
                if (zoomElement) {
                    zoomElement.textContent = `${Math.round(scale * 100)}%`;
                }
            }

            function showPdfError() {
                const loadingElement = document.getElementById('pdfLoading');
                const errorElement = document.getElementById('pdfError');
                
                if (loadingElement) loadingElement.classList.add('hidden');
                if (errorElement) errorElement.classList.remove('hidden');
            }

            function closePdfViewer() {
                const modal = document.getElementById('pdfViewerModal');
                
                if (modal) {
                    modal.classList.add('hidden');
                    document.body.style.overflow = '';
                    
                    // Reset state
                    pdfDoc = null;
                    pageNum = 1;
                    pageRendering = false;
                    pageNumPending = null;
                    scale = 1.0;
                    baseScale = 1.0;
                    isAnimating = false;
                }
            }

            function openPdfInNewTab() {
                if (currentPdfUrl) {
                    window.open(currentPdfUrl, '_blank');
                }
            }

            function downloadPdf() {
                if (currentPdfUrl) {
                    const link = document.createElement('a');
                    link.href = currentPdfUrl;
                    link.download = currentPdfTitle || 'document.pdf';
                    link.click();
                }
            }

            // Make functions global
            (window as any).openPdfViewer = openPdfViewer;
            (window as any).closePdfViewer = closePdfViewer;
            (window as any).openPdfInNewTab = openPdfInNewTab;
            (window as any).downloadPdf = downloadPdf;
            (window as any).onPrevPage = onPrevPage;
            (window as any).onNextPage = onNextPage;
            (window as any).zoomIn = zoomIn;
            (window as any).zoomOut = zoomOut;
            (window as any).zoomFit = zoomFit;
            
            document.addEventListener('DOMContentLoaded', () => {
                // Initialize dark mode from localStorage
                const savedDarkMode = localStorage.getItem('darkMode') === 'true';
                if (savedDarkMode) {
                    document.documentElement.classList.add('dark');
                    document.body.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                    document.body.classList.remove('dark');
                }
                
                // PDF Viewer functionality
                const viewLatestPDFBtn = document.getElementById('viewLatestPDF');
                const viewPdfBtns = document.querySelectorAll('.view-pdf-btn');

                // Add event listeners for PDF viewer buttons
                if (viewLatestPDFBtn) {
                    viewLatestPDFBtn.addEventListener('click', () => {
                        const pdfUrl = viewLatestPDFBtn.getAttribute('data-pdf-url');
                        const title = viewLatestPDFBtn.getAttribute('data-title');
                        openPdfViewer(pdfUrl || '', title || '');
                    });
                }

                viewPdfBtns.forEach((btn) => {
                    btn.addEventListener('click', () => {
                        const pdfUrl = btn.getAttribute('data-pdf-url');
                        const title = btn.getAttribute('data-title');
                        openPdfViewer(pdfUrl || '', title || '');
                    });
                });

                // PDF Viewer Controls - Use specific selectors for modal buttons
                const zoomInBtn = document.querySelector('#pdfViewerModal #zoomIn');
                const zoomOutBtn = document.querySelector('#pdfViewerModal #zoomOut');
                const zoomFitBtn = document.querySelector('#pdfViewerModal #zoomFit');
                const prevPageBtn = document.querySelector('#pdfViewerModal #pdfPrevPage');
                const nextPageBtn = document.querySelector('#pdfViewerModal #pdfNextPage');

                if (zoomInBtn) {
                    zoomInBtn.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        zoomIn();
                    });
                }

                if (zoomOutBtn) {
                    zoomOutBtn.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        zoomOut();
                    });
                }

                if (zoomFitBtn) {
                    zoomFitBtn.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        zoomFit();
                    });
                }

                if (prevPageBtn) {
                    prevPageBtn.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        if (!isAnimating && pageNum > 1) {
                            onPrevPage();
                        }
                    });
                }

                if (nextPageBtn) {
                    nextPageBtn.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        if (!isAnimating && pageNum < pdfDoc?.numPages) {
                            onNextPage();
                        }
                    });
                }

                // Enhanced Mobile-Optimized Pagination functionality
                const itemsPerPage = window.innerWidth < 640 ? 4 : window.innerWidth < 1024 ? 6 : 8; // Responsive items per page
                const sulimbangContainer = document.getElementById('sulimbangContainer');
                const allSulimbangItems = Array.from(sulimbangContainer?.querySelectorAll('.bg-white.rounded-xl') || []);
                const searchInput = document.getElementById('searchInput') as HTMLInputElement;
                const prevPageButton = document.getElementById('prevPage') as HTMLButtonElement;
                const nextPageButton = document.getElementById('nextPage') as HTMLButtonElement;
                const pageNumbersContainer = document.getElementById('pageNumbers');

                let currentPage = 1;
                let filteredItems = allSulimbangItems;

                function filterItems(query: string) {
                    filteredItems = allSulimbangItems.filter(item => {
                        const titleElement = item.querySelector('h3');
                        const yearElement = item.querySelector('span');
                        const title = titleElement?.textContent?.toLowerCase() || '';
                        const year = yearElement?.textContent?.toLowerCase() || '';
                        return title.includes(query) || year.includes(query);
                    });
                    currentPage = 1;
                    renderPagination();
                    changePage(currentPage);
                }

                function renderPagination() {
                    const totalPages = Math.ceil(filteredItems.length / itemsPerPage);
                    if (pageNumbersContainer) {
                        pageNumbersContainer.innerHTML = '';

                        // Mobile-optimized pagination - show fewer pages
                        const isMobile = window.innerWidth < 640;
                        const maxVisiblePages = isMobile ? 3 : 5;

                        if (totalPages > 0) {
                            const firstPageButton = createPageButton(1);
                            pageNumbersContainer.appendChild(firstPageButton);
                        }

                        const startPage = Math.max(2, currentPage - Math.floor(maxVisiblePages / 2));
                        const endPage = Math.min(totalPages - 1, startPage + maxVisiblePages - 3);

                        if (startPage > 2) {
                            const ellipsis = document.createElement('span');
                            ellipsis.className = 'px-1 sm:px-2 text-gray-500 text-xs sm:text-sm';
                            ellipsis.textContent = '...';
                            pageNumbersContainer.appendChild(ellipsis);
                        }

                        for (let i = startPage; i <= endPage; i++) {
                            const pageButton = createPageButton(i);
                            pageNumbersContainer.appendChild(pageButton);
                        }

                        if (endPage < totalPages - 1 && totalPages > maxVisiblePages) {
                            const ellipsis = document.createElement('span');
                            ellipsis.className = 'px-1 sm:px-2 text-gray-500 text-xs sm:text-sm';
                            ellipsis.textContent = '...';
                            pageNumbersContainer.appendChild(ellipsis);
                        }

                        if (totalPages > 1) {
                            const lastPageButton = createPageButton(totalPages);
                            pageNumbersContainer.appendChild(lastPageButton);
                        }
                    }

                    if (prevPageButton) prevPageButton.disabled = currentPage === 1;
                    if (nextPageButton) nextPageButton.disabled = currentPage === totalPages || totalPages === 0;
                }

                function createPageButton(pageNumber: number) {
                    const pageButton = document.createElement('button');
                    pageButton.className = `w-8 h-8 sm:w-10 sm:h-10 flex items-center justify-center rounded-full transition-all text-xs sm:text-sm ${
                        currentPage === pageNumber ? 'text-white font-medium' : 'bg-white text-gray-600'
                    }`;
                    pageButton.style.backgroundColor = currentPage === pageNumber ? '#61063B' : '#ffffff';
                    pageButton.style.color = currentPage === pageNumber ? '#ffffff' : '#6b7280';
                    
                    // Add hover effect
                    pageButton.addEventListener('mouseenter', () => {
                        if (currentPage !== pageNumber) {
                            pageButton.style.backgroundColor = '#03045e';
                            pageButton.style.color = '#ffffff';
                        }
                    });
                    
                    pageButton.addEventListener('mouseleave', () => {
                        if (currentPage !== pageNumber) {
                            pageButton.style.backgroundColor = '#ffffff';
                            pageButton.style.color = '#6b7280';
                        }
                    });
                    
                    pageButton.textContent = pageNumber.toString();
                    pageButton.addEventListener('click', () => changePage(pageNumber));
                    return pageButton;
                }

                function changePage(page: number) {
                    currentPage = page;
                    const startIndex = (currentPage - 1) * itemsPerPage;
                    const endIndex = startIndex + itemsPerPage;

                    allSulimbangItems.forEach((item) => {
                        (item as HTMLElement).style.display = 'none';
                    });

                    filteredItems.slice(startIndex, endIndex).forEach((item) => {
                        (item as HTMLElement).style.display = 'block';
                    });

                    renderPagination();
                }

                if (searchInput) {
                    searchInput.addEventListener('input', (e) => {
                        const query = (e.target as HTMLInputElement).value.toLowerCase();
                        filterItems(query);
                    });
                }

                if (prevPageButton) {
                    prevPageButton.addEventListener('click', () => {
                        if (currentPage > 1) changePage(currentPage - 1);
                    });
                }

                if (nextPageButton) {
                    nextPageButton.addEventListener('click', () => {
                        if (currentPage < Math.ceil(filteredItems.length / itemsPerPage)) changePage(currentPage + 1);
                    });
                }

                // Initialize
                filterItems('');
                renderPagination();

                // Handle window resize to adjust pagination
                window.addEventListener('resize', () => {
                    renderPagination();
                });
            });
        </script>

        <style>
            :root {
                --msu-dark-blue: #003366;
                --msu-blue: #61063B;
                --msu-light-blue: #E6F2FF;
                --msu-gold: #FFCC00;
                --msu-dark-gold: #E6B800;
                --msu-deep-ocean: #1e3a8a;
            }
            
            /* Dark mode color overrides - using Tailwind's dark class */
            .dark {
                --msu-dark-blue: #fbbf24;
                --msu-blue: #fbbf24;
                --msu-light-blue: #1f2937;
                --msu-gold: #fbbf24;
                --msu-dark-gold: #f59e0b;
                --msu-deep-ocean: #fbbf24;
            }
            
            /* MSU brand colors for light mode */
            .bg-msu-dark-blue {
                background-color: var(--msu-dark-blue);
            }
            
            .bg-msu-blue {
                background-color: var(--msu-blue);
            }
            
            .bg-msu-light-blue {
                background-color: var(--msu-light-blue);
            }
            
            .bg-msu-gold {
                background-color: var(--msu-gold);
            }
            
            .bg-msu-dark-gold {
                background-color: var(--msu-dark-gold);
            }
            
            .text-msu-dark-blue {
                color: var(--msu-dark-blue);
            }
            
            .text-msu-blue {
                color: var(--msu-blue);
            }
            
            .text-msu-gold {
                color: var(--msu-gold);
            }
            
            .border-msu-blue {
                border-color: var(--msu-blue);
            }
            
            .hover\:bg-msu-dark-gold:hover {
                background-color: var(--msu-dark-gold);
            }
            
            .hover\:text-msu-dark-blue:hover {
                color: var(--msu-dark-blue);
            }
            
            .bg-msu-deep-ocean {
                background-color: var(--msu-deep-ocean);
            }
            
            .text-msu-deep-ocean {
                color: var(--msu-deep-ocean);
            }
            
            .border-msu-deep-ocean {
                border-color: var(--msu-deep-ocean);
            }
            
            /* Dark mode specific overrides - only when dark class is present */
            .dark .text-msu-blue,
            .dark .text-msu-dark-blue,
            .dark .text-msu-main-color,
            .dark .text-msu-deep-ocean {
                color: #fbbf24;
            }
            
            .dark .bg-msu-blue,
            .dark .bg-msu-main-color,
            .dark .bg-msu-deep-ocean {
                background-color: #fbbf24;
            }
            
            .dark .border-msu-blue,
            .dark .border-msu-deep-ocean {
                border-color: #fbbf24;
            }
            
            .dark .hover\:text-msu-blue:hover,
            .dark .hover\:text-msu-dark-blue:hover {
                color: #f59e0b;
            }
            
            .dark .hover\:bg-msu-deep-ocean:hover {
                background-color: #f59e0b;
            }
            
            .dark .bg-msu-blue\/10 {
                background-color: rgba(251, 191, 36, 0.1);
            }
            
            .dark .border-msu-blue\/30,
            .dark .border-msu-deep-ocean\/30 {
                border-color: rgba(251, 191, 36, 0.3);
            }
            
            .dark .border-msu-blue\/40,
            .dark .border-msu-deep-ocean\/40 {
                border-color: rgba(251, 191, 36, 0.4);
            }
            
            .dark .bg-msu-deep-ocean\/20 {
                background-color: rgba(251, 191, 36, 0.2);
            }
            
            .dark .bg-msu-deep-ocean\/30 {
                background-color: rgba(251, 191, 36, 0.3);
            }
            
            .dark .bg-msu-deep-ocean\/50 {
                background-color: rgba(251, 191, 36, 0.5);
            }
            
            /* Dark mode headings */
            .dark h1,
            .dark h2,
            .dark h3,
            .dark .headings {
                color: #fbbf24;
            }
            
            /* Dark mode publication cards */
            .dark .bg-white.dark\:bg-gray-800 h3,
            .dark .bg-white.dark\:bg-gray-800 h2,
            .dark .bg-white.dark\:bg-gray-800 h1 {
                color: #fbbf24;
            }
            
            /* Dark mode links and buttons */
            .dark a[class*="text-msu"],
            .dark button[class*="bg-msu"] {
                color: #fbbf24;
            }
            
            .dark button[class*="bg-msu"] {
                background-color: #fbbf24;
            }
            
            /* Dark mode blue color overrides */
            .dark .text-blue-400,
            .dark .text-blue-500,
            .dark .text-blue-600,
            .dark .text-blue-700 {
                color: #fbbf24;
            }
            
            /* Enhanced dark mode readability for publication cards */
            .dark .bg-white.dark\:bg-gray-800 h3,
            .dark .bg-white.dark\:bg-gray-800 h2,
            .dark .bg-white.dark\:bg-gray-800 h1 {
                color: #fbbf24 !important;
                font-weight: 600;
            }
            
            /* Force all text in publication cards to be readable in dark mode */
            .dark .bg-white.dark\:bg-gray-800 .text-msu-blue,
            .dark .bg-white.dark\:bg-gray-800 .text-msu-dark-blue,
            .dark .bg-white.dark\:bg-gray-800 .text-msu-main-color {
                color: #fbbf24 !important;
            }
            
            /* Ensure links are visible in dark mode */
            .dark .bg-white.dark\:bg-gray-800 a {
                color: #fbbf24 !important;
            }
            
            .dark .bg-white.dark\:bg-gray-800 a:hover {
                color: #f59e0b !important;
            }
            
            /* Force all publication card text to be readable */
            .dark .bg-white.dark\:bg-gray-800 * {
                color: inherit;
            }
            
            /* Specific override for publication titles */
            .dark .bg-white.dark\:bg-gray-800 .headings {
                color: #fbbf24 !important;
                font-weight: 600;
            }
            
            /* Ensure year and links are visible */
            .dark .bg-white.dark\:bg-gray-800 span,
            .dark .bg-white.dark\:bg-gray-800 a {
                color: #fbbf24 !important;
            }
            
            .bg-msu-dark-blue {
                background-color: var(--msu-dark-blue);
            }
            
            .bg-msu-blue {
                background-color: var(--msu-blue);
            }
            
            .bg-msu-light-blue {
                background-color: var(--msu-light-blue);
            }
            
            .bg-msu-gold {
                background-color: var(--msu-gold);
            }
            
            .bg-msu-dark-gold {
                background-color: var(--msu-dark-gold);
            }
            
            .text-msu-dark-blue {
                color: var(--msu-dark-blue);
            }
            
            .text-msu-blue {
                color: var(--msu-blue);
            }
            
            .text-msu-gold {
                color: var(--msu-gold);
            }
            
            .border-msu-blue {
                border-color: var(--msu-blue);
            }
            
            .hover\:bg-msu-dark-gold:hover {
                background-color: var(--msu-dark-gold);
            }
            
            .hover\:text-msu-dark-blue:hover {
                color: var(--msu-dark-blue);
            }
            
            .bg-msu-deep-ocean {
                background-color: var(--msu-deep-ocean);
            }
            
            .text-msu-deep-ocean {
                color: var(--msu-deep-ocean);
            }
            
            .border-msu-deep-ocean {
                border-color: var(--msu-deep-ocean);
            }
            
            .line-clamp-2 {
                display: -webkit-box;
                -webkit-line-clamp: 2;
                -webkit-box-orient: vertical;
                overflow: hidden;
            }
            
            .line-clamp-3 {
                display: -webkit-box;
                -webkit-line-clamp: 3;
                -webkit-box-orient: vertical;
                overflow: hidden;
            }
            
            .shadow-lg {
                box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
            }
            
            /* Mobile-First Responsive PDF Viewer Styles */
            #pdfViewerModal {
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                backdrop-filter: blur(12px);
            }
            
            #pdfViewerModal.hidden {
                opacity: 0;
                pointer-events: none;
                transform: scale(0.9) translateY(20px);
            }
            
            #pdfViewerModal:not(.hidden) {
                opacity: 1;
                pointer-events: auto;
                transform: scale(1) translateY(0);
            }
            
            /* Mobile-optimized modal container */
            #pdfViewerModal .bg-white {
                box-shadow: 0 32px 64px -12px rgba(0, 0, 0, 0.4);
                border: 1px solid rgba(255, 255, 255, 0.2);
                backdrop-filter: blur(20px);
            }
            
            /* Mobile-optimized buttons */
            #pdfViewerModal button {
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                box-shadow: 0 4px 8px -2px rgba(0, 0, 0, 0.1);
                backdrop-filter: blur(10px);
                touch-action: manipulation; /* Improve touch responsiveness */
            }
            
            /* Mobile hover states - only apply on non-touch devices */
            @media (hover: hover) {
                #pdfViewerModal button:hover {
                    transform: translateY(-1px) scale(1.02);
                    box-shadow: 0 8px 16px -4px rgba(0, 0, 0, 0.15);
                }
            }
            
            /* Mobile animations */
            @keyframes fadeInUp {
                from {
                    opacity: 0;
                    transform: translateY(20px) scale(0.98);
                }
                to {
                    opacity: 1;
                    transform: translateY(0) scale(1);
                }
            }
            
            @keyframes slideInFromTop {
                from {
                    opacity: 0;
                    transform: translateY(-15px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }
            
            #pdfViewerModal:not(.hidden) .bg-white {
                animation: fadeInUp 0.4s ease-out;
            }
            
            #pdfViewerModal:not(.hidden) .bg-gradient-to-r {
                animation: slideInFromTop 0.5s ease-out 0.1s both;
            }
            
            /* Mobile-optimized PDF Canvas Styles */
            #pdfCanvas {
                max-width: 100%;
                height: auto;
                box-shadow: 0 10px 20px -5px rgba(0, 0, 0, 0.1);
                border-radius: 8px;
                background: white;
                border: 1px solid rgba(0, 0, 0, 0.05);
            }
            
            /* Mobile-optimized scrollbar */
            #pdfContainer::-webkit-scrollbar {
                width: 8px;
                height: 8px;
            }
            
            #pdfContainer::-webkit-scrollbar-track {
                background: rgba(241, 241, 241, 0.8);
                border-radius: 4px;
            }
            
            #pdfContainer::-webkit-scrollbar-thumb {
                background: linear-gradient(135deg, #c1c1c1, #a8a8a8);
                border-radius: 4px;
                border: 1px solid rgba(241, 241, 241, 0.8);
            }
            
            /* Mobile loading animation */
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            @keyframes ping {
                75%, 100% {
                    transform: scale(1.1);
                    opacity: 0;
                }
            }
            
            .animate-spin {
                animation: spin 1s linear infinite;
            }
            
            .animate-ping {
                animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
            }
            
            /* Mobile MSU header gradient */
            #pdfViewerModal .bg-gradient-to-r {
                background: linear-gradient(135deg, #61063B 0%, #003366 50%, #61063B 100%);
                box-shadow: 0 2px 10px -2px rgba(97, 6, 59, 0.2);
            }
            
            /* Mobile button disabled states */
            #pdfViewerModal button:disabled {
                opacity: 0.4;
                cursor: not-allowed;
                transform: none !important;
                box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.05);
            }
            
            /* Mobile glassmorphism effects */
            #pdfViewerModal .bg-white\/15 {
                background: rgba(255, 255, 255, 0.15);
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            
            #pdfViewerModal .bg-white\/20 {
                background: rgba(255, 255, 255, 0.2);
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255, 255, 255, 0.25);
            }
            
            /* Mobile-specific responsive breakpoints */
            @media (max-width: 480px) {
                #pdfViewerModal .bg-white {
                    border-radius: 0;
                    margin: 0;
                    height: 100vh;
                }
                
                #pdfViewerModal .p-3 {
                    padding: 0.75rem;
                }
                
                #pdfViewerModal .flex.flex-col.sm\\:flex-row {
                    gap: 0.5rem;
                }
                
                #pdfViewerModal .space-x-2 > :not([hidden]) ~ :not([hidden]) {
                    margin-left: 0.25rem;
                }
            }
            
            /* Enhanced mobile touch targets */
            @media (max-width: 768px) {
                #pdfViewerModal button {
                    min-height: 44px;
                    min-width: 44px;
                    touch-action: manipulation;
                }
                
                #pdfViewerModal input,
                #pdfViewerModal select {
                    min-height: 44px;
                    font-size: 16px; /* Prevent zoom on iOS */
                }
            }
            
            /* Mobile Book Flip Animation Styles */
            .perspective-1000 {
                perspective: 800px; /* Reduced for mobile */
            }
            
            .transform-style-preserve-3d {
                transform-style: preserve-3d;
            }
            
            .backface-hidden {
                backface-visibility: hidden;
            }
            
            .rotateY-180 {
                transform: rotateY(180deg);
            }
            
            #pdfCanvasContainer {
                width: 100%;
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            #pageFlipContainer {
                transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
                transform-origin: center;
                width: 100%;
                height: 100%;
                max-width: calc(100vw - 1rem);
                max-height: calc(100vh - 8rem);
            }
            
            /* Mobile-optimized flip animations */
            @media (max-width: 768px) {
                #pageFlipContainer {
                    transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
                    max-height: calc(100vh - 6rem);
                    max-width: calc(100vw - 0.5rem);
                }
            }
            
            #currentPageContainer, #nextPageContainer {
                display: flex;
                align-items: center;
                justify-content: center;
                width: 100%;
                height: 100%;
            }
            
            /* Mobile page turn shadow effects */
            #pageTurnShadow {
                transition: opacity 0.5s ease-in-out;
            }
            
            /* Mobile-enhanced canvas styling */
            #pdfCanvas, #nextPdfCanvas {
                transition: all 0.3s ease-in-out;
                border: 1px solid rgba(0, 0, 0, 0.08);
                box-shadow: 
                    0 10px 20px -5px rgba(0, 0, 0, 0.1),
                    0 0 0 1px rgba(255, 255, 255, 0.5);
                border-radius: 8px;
                background: white;
                max-width: 100%;
                max-height: 100%;
                width: auto;
                height: auto;
                object-fit: contain;
            }
            
            /* Mobile page flip hover effects - only on hover-capable devices */
            @media (hover: hover) {
                #pdfPrevPage:hover, #pdfNextPage:hover {
                    background: rgba(255, 255, 255, 0.35);
                    transform: translateY(-1px) scale(1.05);
                    box-shadow: 0 8px 15px -4px rgba(0, 0, 0, 0.15);
                }
            }
            
            /* Mobile disabled button states */
            #pdfViewerModal #pdfPrevPage:disabled, 
            #pdfViewerModal #pdfNextPage:disabled {
                opacity: 0.3 !important;
                cursor: not-allowed !important;
                pointer-events: none !important;
                transform: none !important;
            }
            
            /* Mobile page curl effect */
            .page-curling {
                animation: mobilePagCurl 0.5s ease-in-out;
            }
            
            @keyframes mobilePagCurl {
                0% {
                    transform: perspective(400px) rotateX(0deg);
                }
                50% {
                    transform: perspective(400px) rotateX(-0.5deg) scale(1.005);
                }
                100% {
                    transform: perspective(400px) rotateX(0deg) scale(1);
                }
            }
            
            /* Mobile-optimized loading animation */
            @keyframes mobileLoadingPulse {
                0%, 100% {
                    opacity: 1;
                    transform: scale(1);
                }
                50% {
                    opacity: 0.7;
                    transform: scale(1.02);
                }
            }
            
            #pdfLoading h3 {
                animation: mobileLoadingPulse 1.5s ease-in-out infinite;
            }
            
            /* Mobile scroll to top button */
            .scroll-to-top {
                opacity: 0;
                visibility: hidden;
                transition: all 0.3s ease-in-out;
            }
            
            .scroll-to-top.show {
                opacity: 1;
                visibility: visible;
            }
            
            @media (max-width: 768px) {
                .scroll-to-top {
                    bottom: 1rem;
                    right: 1rem;
                    width: 48px;
                    height: 48px;
                }
            }
            
            /* Mobile-optimized grid layout */
            @media (max-width: 640px) {
                .grid {
                    gap: 1rem;
                }
                
                .container {
                    padding-left: 1rem;
                    padding-right: 1rem;
                }
            }
            
            /* Enhanced dark mode publication card styling */
            .dark .bg-white.dark\:bg-gray-800 {
                background-color: #1f2937 !important;
                border-color: #374151 !important;
            }
            
            /* Ensure all text in dark mode publication cards is readable */
            .dark .bg-white.dark\:bg-gray-800 .text-gray-600 {
                color: #d1d5db !important;
            }
            
            .dark .bg-white.dark\:bg-gray-800 .text-gray-300 {
                color: #d1d5db !important;
            }
            
            /* Force golden yellow for all MSU brand colors in dark mode */
            .dark .bg-white.dark\:bg-gray-800 [class*="text-msu"] {
                color: #fbbf24 !important;
            }
            
            /* Ensure SVG icons are also visible */
            .dark .bg-white.dark\:bg-gray-800 svg {
                color: #fbbf24 !important;
            }
            
            /* Hover states for better interaction */
            .dark .bg-white.dark\:bg-gray-800 a:hover svg {
                color: #f59e0b !important;
            }
            
            /* Specific targeting for Sulimbang publication cards */
            .dark .bg-white.dark\:bg-gray-800.rounded-xl {
                background-color: #1f2937 !important;
                border-color: #374151 !important;
            }
            
            /* Force all text in Sulimbang cards to be readable */
            .dark .bg-white.dark\:bg-gray-800.rounded-xl h3,
            .dark .bg-white.dark\:bg-gray-800.rounded-xl h2,
            .dark .bg-white.dark\:bg-gray-800.rounded-xl h1 {
                color: #fbbf24 !important;
                font-weight: 600;
            }
            
            .dark .bg-white.dark\:bg-gray-800.rounded-xl p {
                color: #d1d5db !important;
            }
            
            .dark .bg-white.dark\:bg-gray-800.rounded-xl span {
                color: #fbbf24 !important;
            }
            
            .dark .bg-white.dark\:bg-gray-800.rounded-xl a {
                color: #fbbf24 !important;
            }
            
            .dark .bg-white.dark\:bg-gray-800.rounded-xl a:hover {
                color: #f59e0b !important;
            }
            
            .dark .bg-white.dark\:bg-gray-800.rounded-xl svg {
                color: #fbbf24 !important;
            }
            
            /* Ensure all MSU brand colors are golden in dark mode */
            .dark .bg-white.dark\:bg-gray-800.rounded-xl [class*="text-msu"] {
                color: #fbbf24 !important;
            }
            
            /* Force all text elements to inherit the golden color */
            .dark .bg-white.dark\:bg-gray-800.rounded-xl * {
                color: inherit;
            }
            
            /* Mobile text sizing */
            @media (max-width: 480px) {
                .text-3xl {
                    font-size: 1.875rem;
                    line-height: 2.25rem;
                }
                
                .text-2xl {
                    font-size: 1.5rem;
                    line-height: 2rem;
                }
                
                .text-xl {
                    font-size: 1.25rem;
                    line-height: 1.75rem;
                }
            }
            
            /* Mobile button sizing improvements */
            @media (max-width: 640px) {
                .inline-flex {
                    min-height: 44px;
                    justify-content: center;
                    align-items: center;
                }
                
                .view-pdf-btn {
                    font-size: 0.875rem;
                    padding: 0.5rem 0.75rem;
                }
            }
            
            /* Mobile pagination improvements */
            @media (max-width: 480px) {
                #pagination {
                    flex-wrap: wrap;
                    justify-content: center;
                    gap: 0.25rem;
                }
                
                #pageNumbers {
                    order: 2;
                    width: 100%;
                    justify-content: center;
                    margin-top: 0.5rem;
                }
                
                #prevPage, #nextPage {
                    order: 1;
                }
            }
            
            /* Improved mobile search */
            @media (max-width: 640px) {
                #searchInput {
                    font-size: 16px; /* Prevent zoom on iOS */
                    padding: 0.875rem 2.5rem 0.875rem 2.5rem;
                }
                
                #searchInput::placeholder {
                    font-size: 0.875rem;
                }
            }
            
            /* Mobile-optimized hero section */
            @media (max-width: 640px) {
                .relative.pt-16 {
                    padding-top: 4rem;
                    padding-bottom: 2rem;
                }
                
                .mb-8.sm\\:mb-12.lg\\:mb-16 {
                    margin-bottom: 2rem;
                }
            }
            
            /* Mobile latest publication section */
            @media (max-width: 640px) {
                .py-8.sm\\:py-12.lg\\:py-16 {
                    padding-top: 2rem;
                    padding-bottom: 2rem;
                }
                
                .gap-6.sm\\:gap-8.lg\\:gap-12 {
                    gap: 1.5rem;
                }
            }
        </style>
    </main>
</Layout>