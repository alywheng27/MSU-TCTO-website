---
import Layout from '../../layouts/Layout.astro';
import Navbar from "../../components/Navbar";
import MainVideo from "../../components/MainVideo.astro";
import FooterNav from "../../components/FooterNav.astro";
import Footer from "../../components/Footer.astro";
import GazetteTab from "../../components/GazetteTab";
import '../../styles/css/global.css';

const currentPath = Astro.url.pathname;

import { urlForImage } from '../../api/api';

import { getArticle } from '../../api/api';
const articles = await getArticle();

import { getSingleLatestArticle } from '../../api/api';
const singleLatestArticle = await getSingleLatestArticle();

import { get4LatestArticles } from '../../api/api';
const fourLatestArticles = await get4LatestArticles();

---


<Layout title="MSU | Tawi-Tawi College of Technology and Oceanography">
    <main>
        <Navbar path={currentPath} client:visible />

<!-- Animated Magazine-Style Article Card -->
<div class="flex justify-center xl:mx-[240px] xs:mx-[20px] xl:mt-20">
    <div class="group relative bg-white rounded-xl shadow-lg overflow-hidden transition-all duration-500 hover:shadow-2xl hover:-translate-y-2 w-full max-w-3xl p-6">
        <!-- Image -->
        <div class="relative w-full overflow-hidden rounded-lg">
            <img src={urlForImage(singleLatestArticle.mainImage.asset.url).url()} 
                 alt="" 
                 class="w-full h-[250px] sm:h-[350px] xl:h-[400px] object-cover rounded-lg transition-transform duration-500 group-hover:scale-105" />
            <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-80 group-hover:opacity-100 transition-opacity duration-300"></div>
        </div>

        <!-- Article Content -->
        <div class="text-center mt-6">
            <a href={`/${singleLatestArticle.slug.current}`} class="hover:no-underline">
                <h4 class="text-2xl sm:text-3xl font-bold leading-snug tracking-wide text-gray-900 group-hover:text-blue-500 transition-colors duration-300 font-serif line-clamp-2">
                    {singleLatestArticle.title}
                </h4>
            </a>

            <p class="text-lg text-gray-700 mt-4 leading-relaxed font-light italic line-clamp-3 max-w-[700px]">
                {singleLatestArticle.body[0].children[0].text}
            </p>

            <a href={`/${singleLatestArticle.slug.current}`} 
            class="mt-4 inline-flex items-center text-blue-600 font-semibold tracking-wide hover:text-blue-800 transition-all duration-300 font-serif uppercase text-lg sm:text-xl">
             Read More
             <svg class="w-5 h-5 ml-1 transition-transform duration-300 group-hover:translate-x-1" 
                  fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                 <path strokeLinecap="round" strokeLinejoin="round" d="M9 5l7 7-7 7"></path>
             </svg>
         </a>
         
        </div>
    </div>
</div>


<!-- Main Content -->
<div class="text-center mt-10 px-4">
    <h3 class="text-2xl sm:text-3xl lg:text-4xl font-extrabold text-white">Search filtered Articles</h3>
</div>


        <!-- Global Search Bar -->
        <div class="flex justify-center mt-10 px-5">
            <div class="w-full max-w-4xl">
                <input type="text" id="searchInput" placeholder="Search articles..." class="w-full px-6 py-3 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 shadow-sm hover:shadow-md" />
            </div>
        </div>
        <div class="flex justify-center xl:mx-[240px] xs:mx-5 mt-[80px]">
            <div class="grid xl:grid-cols-2 xs:grid-cols-1 gap-10 xs:gap-[20px] w-full" id="articlesContainer">
                {articles.map((article, index) => (
                    <div class="relative overflow-hidden rounded-lg shadow-lg bg-white group transition-all duration-300 hover:shadow-xl hover:-translate-y-1 article-item"
                         data-index={index}>
                        <div class="relative w-full overflow-hidden rounded-t-lg">
                            <img src={ urlForImage(article.mainImage.asset.url).url() } 
                                 alt="" 
                                 class="w-full md:h-[700px] object-cover object-center transition-transform duration-500 group-hover:scale-105 group-hover:shadow-lg" />
                            <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-80 group-hover:opacity-100 transition-opacity duration-300"></div>
                        </div>
                        <div class="flex flex-col flex-1 p-5">
                            <a href={`/${article.slug.current}`} class="hover:no-underline">
                                <h5 class="text-[22px] font-extrabold leading-snug tracking-wide text-gray-900 group-hover:text-blue-500 transition-colors duration-300 font-serif line-clamp-3">
                                    { article.title }
                                </h5>
                            </a>
                            <p class="text-[16px] text-gray-700 mt-3 leading-relaxed font-light italic line-clamp-2">
                                {article.body[0].children[0].text}
                            </p>
                            <a href={`/${article.slug.current}`} class="mt-4 text-blue-600 font-semibold tracking-wide hover:text-blue-800 transition-all duration-300 flex items-center gap-1">
                                Read More 
                                <svg class="w-4 h-4 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M9 5l7 7-7 7"></path>
                                </svg>
                            </a>
                        </div>
                    </div>
                ))}
            </div>
        </div>


<!-- Pagination Controls -->
<div class="flex justify-center mt-8 space-x-2">
    <!-- Previous Button -->
    <button id="prevPage" class="flex items-center px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full shadow-md hover:from-blue-600 hover:to-purple-600 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
        <svg class="w-5 h-5 mr-2 text-white" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"></path>
        </svg>
        <span class="text-white font-semibold">Previous</span>
    </button>

    <!-- Page Numbers -->
    <div class="flex items-center space-x-2">
        <span id="pageInfo" class="px-4 py-2 text-lg font-semibold text-white">Page 1 of 5</span>
    </div>

    <!-- Next Button -->
    <button id="nextPage" class="flex items-center px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full shadow-md hover:from-blue-600 hover:to-purple-600 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed">
        <span class="text-white font-semibold">Next</span>
        <svg class="w-5 h-5 ml-2 text-white" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"></path>
        </svg>
    </button>
</div>


        <FooterNav />
        <Footer />
    </main>
</Layout>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const articlesPerPage = 4;
        let currentPage = 1;
        const allArticles = Array.from(document.querySelectorAll(".article-item"));
        let filteredArticles = [...allArticles]; // Initially, all articles are shown
        const searchInput = document.getElementById("searchInput");
        const articlesContainer = document.getElementById("articlesContainer");
        const pageInfo = document.getElementById("pageInfo");
        const prevPageBtn = document.getElementById("prevPage");
        const nextPageBtn = document.getElementById("nextPage");

        function updatePagination() {
            const totalPages = Math.ceil(filteredArticles.length / articlesPerPage);
            
            // Ensure the current page is within bounds
            if (currentPage > totalPages) currentPage = totalPages || 1;
            
            // Hide all articles
            allArticles.forEach(article => article.style.display = "none");

            // Calculate the range to show
            const start = (currentPage - 1) * articlesPerPage;
            const end = start + articlesPerPage;

            // Show only articles for the current page
            filteredArticles.slice(start, end).forEach(article => article.style.display = "block");

            // Update pagination controls
            pageInfo.textContent = `Page ${totalPages > 0 ? currentPage : 0} of ${totalPages}`;
            prevPageBtn.disabled = currentPage === 1;
            nextPageBtn.disabled = currentPage === totalPages || totalPages === 0;

            // Show/hide pagination buttons based on search results
            if (filteredArticles.length === 0) {
                pageInfo.style.display = "none";
                prevPageBtn.style.display = "none";
                nextPageBtn.style.display = "none";
            } else {
                pageInfo.style.display = "inline-block";
                prevPageBtn.style.display = "inline-block";
                nextPageBtn.style.display = "inline-block";
            }
        }

        // Pagination event listeners
        prevPageBtn.addEventListener("click", function () {
            if (currentPage > 1) {
                currentPage--;
                updatePagination();
            }
        });

        nextPageBtn.addEventListener("click", function () {
            const totalPages = Math.ceil(filteredArticles.length / articlesPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                updatePagination();
            }
        });

        // Search function
        searchInput.addEventListener("input", function () {
            const searchQuery = this.value.toLowerCase().trim();

            if (searchQuery === "") {
                filteredArticles = [...allArticles];
            } else {
                filteredArticles = allArticles.filter(article => {
                    const title = article.querySelector("h5").textContent.toLowerCase();
                    const body = article.querySelector("p").textContent.toLowerCase();
                    return title.includes(searchQuery) || body.includes(searchQuery);
                });
            }

            // Reset to first page when searching
            currentPage = 1;
            updatePagination();
        });

        // Initial pagination setup
        updatePagination();
    });
</script>




