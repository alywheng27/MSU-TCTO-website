<!-- Student Survey Tab Content -->
<div id="studentreg-survey" class="tab-content">
  <section id="studentreg-survey" class="bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 py-16 md:py-24">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-4xl">
      <div class="text-center mb-12">
                                                 <span class="inline-block px-4 py-2 bg-msu-main-color/10 dark:bg-[#61063B]/20 text-msu-main-color dark:bg-gradient-to-r dark:from-[#61063B] dark:to-white dark:bg-clip-text dark:text-transparent text-sm font-semibold rounded-full mb-4">
                   Student Feedback Survey
                 </span>
                <h2 class="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-gray-100 mb-4">
                                     Student Satisfaction Survey <span class="text-msu-main-color dark:bg-gradient-to-r dark:from-[#61063B] dark:to-white dark:bg-clip-text dark:text-transparent">For Regular </span>
                </h2>
                                 <div class="w-24 h-1.5 bg-gradient-to-r from-msu-gold to-msu-maroon dark:from-[#61063B] dark:to-white mx-auto rounded-full"></div>
        <p class="text-lg text-gray-600 dark:text-gray-300 mt-6 max-w-2xl mx-auto">
          Your feedback helps us improve campus services and facilities
        </p>
      </div>

      <!-- Progress Legend -->
      <div class="verification-legend">
        <div class="verification-legend-item">
          <div class="verification-legend-badge verified">✓</div>
          <span>Verified & Submitted</span>
        </div>
        <div class="verification-legend-item">
          <div class="verification-legend-badge completed">✓</div>
          <span>Completed (Not Submitted)</span>
        </div>
        <div class="verification-legend-item">
          <div class="verification-legend-badge not-completed">✕</div>
          <span>Not Completed</span>
        </div>
      </div>

      <!-- Survey Card -->
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl overflow-hidden border border-gray-100 dark:border-gray-700">
        <div class="bg-gradient-to-r from-msu-main-color to-msu-maroon px-8 py-6">
          <div class="flex items-center">
            <div class="bg-white/20 p-2 rounded-lg mr-4">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-semibold text-white">Academic Year 2025-2026</h3>
              <p class="text-white/90">Please provide honest feedback about our services</p>
            </div>
          </div>
        </div>

        <div class="p-6 sm:p-8">
                          <form id="regstudentSurveyForm" class="space-y-8">
            <!-- Student Information -->
            <div class="grid md:grid-cols-2 gap-6">
              <div class="form-group">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Year Level <span class="text-msu-maroon dark:text-red-400">*</span>
                </label>
                <div class="grid grid-cols-4 gap-2">
            
                  <label class="flex items-center">
                    <input type="radio" name="entry.1602134174" value="2nd" class="h-4 w-4 text-msu-main-color dark:text-[#61063B] focus:ring-msu-main-color dark:focus:ring-[#61063B] border-gray-300 dark:border-gray-600 dark:bg-gray-700">
                    <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">2nd</span>
                  </label>
                  <label class="flex items-center">
                    <input type="radio" name="entry.1602134174" value="3rd" class="h-4 w-4 text-msu-main-color dark:text-[#61063B] focus:ring-msu-main-color dark:focus:ring-[#61063B] border-gray-300 dark:border-gray-600 dark:bg-gray-700">
                    <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">3rd</span>
                  </label>
                  <label class="flex items-center">
                    <input type="radio" name="entry.1602134174" value="4th" class="h-4 w-4 text-msu-main-color dark:text-[#61063B] focus:ring-msu-main-color dark:focus:ring-[#61063B] border-gray-300 dark:border-gray-600 dark:bg-gray-700">
                    <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">4th</span>
                  </label>
                </div>
              </div>

              <div class="form-group">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Course <span class="text-msu-maroon dark:text-red-400">*</span>
                </label>
                <input type="text" name="entry.938986881" class="text-black dark:text-white dark:bg-gray-700 block w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-msu-main-color dark:focus:ring-[#61063B] focus:border-msu-main-color dark:focus:border-[#61063B]" placeholder="Enter your course" required>
              </div>
            </div>

            <!-- Hidden Student Number Field -->
            <input 
              type="hidden" 
              name="entry.1609254934" 
              value=""
            >

            <!-- Reference Code Field -->
            <div class="form-group">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Reference Code <span class="text-msu-maroon dark:text-red-400">*</span>
              </label>
              <div class="flex items-center">
                <input 
                  type="text" 
                  name="entry.132807391" 
                  id="regreferenceCodeInputs"
                  class="text-black dark:text-white block w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-msu-main-color dark:focus:ring-[#61063B] focus:border-msu-main-color dark:focus:border-[#61063B] bg-gray-100 dark:bg-gray-600 font-mono" 
                  placeholder="Will be generated automatically" 
                  readonly
                  required
                />
                <button 
                  type="button" 
                  id="regcopyReferenceCodeBtns"
                  class="ml-2 p-2 text-gray-500 dark:text-gray-400 hover:text-msu-main-color dark:hover:text-[#61063B] focus:outline-none"
                  title="Copy to clipboard"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                  </svg>
                </button>
              </div>
              <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">This unique code identifies your submission</p>
            </div>

            <!-- Introductory Message -->
            <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
              <p class="text-sm text-gray-600 dark:text-gray-300">
                Dear Student,<br><br>
                As a valuable member of the university, we would like to ask your opinion about the 
                frontline services you have received and experienced here on campus during the School Year 
                2025-2026.<br><br>
                Your answer will provide us valuable inputs to serve you better and to make sure we meet 
                your expectations. Please check the number that corresponds to your level of assessment.
              </p>
            </div>

                   <!-- Service Sections -->
                   {[
                    {
                      title: "Library Services",
                      icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                      </svg>`,
                      questions: [
                        { text: " Library Staff are professional in their dealings with me.", entry: "entry.1228358537" },
                        { text: "Library staff are knowledgeable", entry: "entry.1152867899" },
                        { text: "Library staff respond in a timely manner", entry: "entry.1999245978" },
                        { text: "Computers and electronic equipment and electronic equipment are accessible in the library.", entry: "entry.426145925" },
                        { text: "Printing and photocopying services are adequate", entry: "entry.2068230753" },
                        { text: "The library's collection meets my research needs", entry: "entry.463347271" },
                        { text: "Group study areas are adequate", entry: "entry.2136922460" },
                        { text: "Library keeps me informed about new services and collections. ", entry: "entry.1878621100" },
                        { text: "Resources are current and relevant", entry: "entry.60058532" },
                        { text: "Borrowing policies and procedures are clearly stated", entry: "entry.1954591289" }
                      ],
                      commentsEntry: "entry.1980894463",
                      suggestionsEntry: "entry.893157908"
                    },
                    {
                            title: "Security Services",
                            icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>`,
                            questions: [
                            { text: "Emergency drills are performed regularly", entry: "entry.348536619" },
                            { text:  "The school monitors the campus's activities via CCTV cameras placed strategically in the campus", entry: "entry.1682782302" },
                            { text: "The security guards identify visitors from students and employees to ensure security",  entry: "entry.1213898326" },
                            { text:  "Roaming around the campus is done with the confidence of being always in safety", entry: "entry.433818447" },
                            { text: "The security guards are polite and diligent when performing their duties", entry: "entry.77788445" },
                            { text: "The security guards are easily identifiable through uniforms even during school events", entry: "entry.990445392" },
                            { text: "Adults in the school apply the same rules to all students equally", entry: "entry.154748050" },
                            { text: "The dress code is strictly implemented in allowing students to enter the school premises", entry: "entry.1625236559" },
                            { text: "The school requires students and employees to wear badges or ID's", entry: "entry.1243398479" },
                            { text:  "Provide a structured anonymous threat reporting system", entry: "entry.1288197922" }
                               ],
                             commentsEntry: "entry.1852251220",
                            suggestionsEntry: "entry.1923499308"
                          },
                          {
                            title: "Admission Services",
                            icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                            </svg>`,
                            questions: [
                             { text: "The admission staff responds to questions and concerns in a timely manner", entry: "entry.820828130" },
                             { text:  "The admissions policies and procedures are posted in a clear and systematic manner in bulletin boards", entry: "entry.1738082272" },
                             { text:  "The website used for registration is efficient and user-friendly", entry: "entry.1722614618" },
                             { text:  "Efficiency and Orderliness of the procedures are strictly observed", entry: "entry.1544337904" },
                             { text:  "The application process was student friendly", entry: "entry.3192744" },
                             { text:  "My interaction with the Admissions office played a positive part in my decision to attend MSU-TCTO", entry: "entry.723483980" },
                              { text: "I received my notice of acceptance in a timely manner", entry: "entry.1214996999" },
                             { text:  "The selection of programs is well-communicated with the applicants before the final registration", entry: "entry.1110642989" },
                             { text:  "The Admissions office is accessible", entry: "entry.1346429120" },
                            { text:   "Updates from the social media page of the office are timely and relevant", entry: "entry.693757894" }
                              ],
                             commentsEntry: "entry.872598532",
                            suggestionsEntry: "entry.728610204"
                          },
                          { ///to be continues
                            title: "Guidance Services",
                            icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                            </svg>`,
                            questions: [
                             { text: "The counselor seemed well-trained and skilled.", entry: "entry.195651681" },
                             { text: "The waiting area is comfortable and well-ventilated.", entry: "entry.384100751" },
                             { text: "The guidance and counseling procedures are well communicated.", entry: "entry.1617377256" },
                             { text: "The counselor and the staff are courteous and prompt.", entry: "entry.182063419" },
                             { text: "The counseling area is well-lit, comfortable and provides privacy.", entry: "entry.1415483722" },
                             { text: "My concerns have been improved because of the services provided.", entry: "entry.1667958942" },
                            { text:"My counselor understood my problems and concerns.", entry: "entry.1815506704" },
                            { text:"I was treated considerately and respectfully by the Counseling staff.", entry: "entry.2021525868" },
                             { text: "I would recommend the service to my friends.", entry: "entry.178359300" },
                             { text: "Updates from the social media page of the office are timely and relevant", entry: "entry.779545470" }
                               ],
                             commentsEntry: "entry.1904930656",
                            suggestionsEntry: "entry.1494873212"
                          },
                          {
                            //tobe cont
                            title: "Laboratory Services",
                            icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                            </svg>`,
                            questions: [
                              { text: "The laboratory premises are clean and organized.", entry: "entry.1575962710" },
                              { text: "The laboratory is well lighted and ventilated.",entry: "entry.1142625376" },
                              { text: "Emergency exits and other laboratory facilities are clearly labeled with legible lettering.", entry: "entry.1834731960" },
                              { text:"Important signs, procedures and information are placed strategically.",entry: "entry.1591873216" },
                              { text:"Chemicals are prepared by professionals and the students are informed of the precautions before the start of the class.", entry: "entry.297430620" },
                              { text:"Proper dress code is strictly observed.",entry: "entry.786886324" },
                              { text: "The units in the computer laboratories are usable and system updated.",entry: "entry.1724527374" },
                              { text: "There is a laboratory for different technologies.",entry: "entry.763779563" },
                              { text:  "The laboratory staff are knowledgeable about the technologies used and procedures implemented in the laboratory.",entry: "entry.520082546" },
                              { text: "Safety equipment and devices are available and within easy reach in case of emergency.",entry: "entry.1809450268" }
                                 ],
                             commentsEntry: "entry.1202246591",
                            suggestionsEntry: "entry.69510103"
                          },
                          {
                            // to be cont food
                            title: "Food Services",
                            icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>`,
                            questions: [
                             {text : "The atmosphere in the cafeteria is welcoming.",entry: "entry.299195989" },
                             { text: "There is a variety of options available in the cafeteria.",entry: "entry.752190045" },
                             { text: "The eating utensils are clean and easily accessible.",entry: "entry.1745681586" },
                             { text: "The staff members are friendly and knowledgeable.",entry: "entry.944423033" },
                             { text:  "The prices of the food are within reasonable range.",entry: "entry.1810344743" },
                             { text: "The food portions are generous.",entry: "entry.752973906" },
                             { text: "Water is readily available in the cafeteria.",entry: "entry.29717497" },
                             { text:  "The food served in the cafeteria are tasty and flavorful.",entry: "entry.815718323" },
                             { text: "The cafeteria can accommodate the number of students even during breaktime.",entry: "entry.254090614" },
                             { text:  "The sanitation in preparing the food is maintained.",entry: "entry.1166268262" }
                                      ],
                             commentsEntry: "entry.471843829",
                            suggestionsEntry: "entry.303333185"
                          },
                          {
                            title: "Health Services",
                            icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                            </svg>`,
                            questions: [
                             {text: "The infirmary personnel are available and efficient.",entry: "entry.1652209592" },
                             {text: "The medical and dental programs offered are clearly posted.",entry: "entry.1112716636" },
                             {text: "The physician's schedule is posted.",entry: "entry.1339656405" },
                              {text:"The infirmary personnel assists in the orientation of the procedures and reminders before each session.",entry: "entry.6187455" },
                             {text: "Medicines and medical kits are readily available.",entry: "entry.257976003" },
                             {text: "The patient rooms are clean and well-maintained.",entry: "entry.491957462" },
                             {text: "The physician's diagnosis is precise and reliable.",entry: "entry.1649677844" },
                             {text:"The issuance of medical certificates is systematic and hassle-free.",entry: "entry.852565957" },
                             {text: "Client profiling is done in a courteous and prompt manner.",entry: "entry.561225562" },
                             {text: "The infirmary offers referral services to distinguished health clinics around the area.",entry: "entry.2036875015" }
                                           ],
                             commentsEntry: "entry.2006632079",
                            suggestionsEntry: "entry.640114302"
                          },
                          {
                            title: "Facilities Services",
                            icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                            </svg>`,
                            questions: [
                            { text:  "The buildings in the campus are logically organized and easy to find.",entry: "entry.2024344394" },
                             { text:   "The buildings are equipped with fire extinguishers and emergency exits.",entry: "entry.867687873" },
                             { text:   "The comfort rooms are neat and clean.",entry: "entry.486371300" },
                             { text:   "The free wi-fi connection is easily accessed and provides an active internet connection.",entry: "entry.735043764" },
                             { text:   "The cafeteria is spacious and well-ventilated.",entry: "entry.1337035907" },
                             { text:   "The offices present in the campus are well-labeled and manned.",entry: "entry.1522481148" },
                             { text:   "The campus premises are free from clutters and other debris that may cause hazards.",entry: "entry.892697473" },
                             { text:   "Student Lounges are available and comfortable.",entry: "entry.1156854469" },
                             { text:   "The gymnasium is well-maintained and can accommodate large groups of people without causing too much crowding.",entry: "entry.1945769610" },
                             { text:   "The covered pathways provide shade from the sun and shield from the rain.",entry: "entry.1342739760" }
                                            ],
                             commentsEntry: "entry.2002771406",
                            suggestionsEntry: "entry.379808948"
                          },
                          {
                            title: "Campus Services",
                            icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>`,
                            questions: [
                             { text: "The orientation program is well-organized and interactive.",entry: "entry.52034271" },
                             { text: "The program facilitators are knowledgeable and respectful.",entry: "entry.228529193" },
                             { text: "The topics covered helped to better understand the goals of the university.",entry: "entry.1892109534" },
                             { text: "The orientation materials provided helpful information about the campus resources.",entry: "entry.716993758" },
                             { text: "The campus tour follows the designated routes in accordance with the provided schedule.",entry: "entry.654254064" },
                             { text: "The orientation program is timely and relevant.",entry: "entry.1388959466" },
                             { text: "The program facilitators responded to questions kindly.",entry: "entry.222410380" },
                             { text:"The safety and comfort of the students are ensured during the entire duration of the program.",entry: "entry.554954556" },
                             { text:"The refreshments provided during the program are satisfying.",entry: "entry.1183780922" },
                             { text: "The orientation increases the confidence that MSU-TCTO is the right choice for a university.",entry: "entry.200465265" }
                                            ],
                             commentsEntry: "entry.618982936",
                            suggestionsEntry: "entry.1377631791"
                          },
                          {
                            title: "Registrar Services",
                            icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>`,
                            questions: [
                             { text: "The Registrar's office staff members are respectful and polite.",entry: "entry.1867963151" },
                             { text: "The Registrar's Office staff members displayed professionalism during interactions.",entry: "entry.1565652822" },
                             { text: "The service was done in a reasonable amount of time.",entry: "entry.269917060" },
                             { text: "The issues raised to the office were addressed and they provided the necessary steps needed for the resolution and/or update until the request was fulfilled.",entry: "entry.1811206048" },
                             { text: "Step-by-Step procedures are visible at the most conspicuous places.",entry: "entry.891932734" },
                             { text: "The physical facilities offered are adequate and appealing.",entry: "entry.1418589719" },
                             { text: "There is quality completeness and accuracy of document/s, service/s, information requested.",entry: "entry.149996940" },
                             { text: "The office has operating hours convenient to customers.",entry: "entry.1921167358" },
                             { text: "The staff members answered inquiries correctly the first time.",entry: "entry.1683544165" },
                             { text: "The waiting lounge is comfortable for the customers.",entry: "entry.413438944" }
                                           ],
                             commentsEntry: "entry.138009429",
                            suggestionsEntry: "entry.1835533127"
                          },
                          {
                            title: "Cashiering Services",
                            icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
                            </svg>`,
                            questions: [
                             { text:  "The cashiering lanes are sufficient.",entry: "entry.1755141063" },
                             { text: "There is a separate lane for people in need of special assistance.",entry: "entry.604334080" },
                              { text: "The office is accessible to customers through in-person mode.",entry: "entry.267937341" },
                              { text: "The office is responsive to requests or problems within an acceptable time.",entry: "entry.979448957" },
                              { text: "Provides effective advice, support, and guidance.",entry: "entry.1562938829" },
                              { text:"The staff are knowledgeable of the office transaction procedures.",entry: "entry.1662282862" },
                              { text: "Problems are resolved effectively.",entry: "entry.2026069748" },
                              { text: "The staff are helpful and courteous.",entry: "entry.1739606190" },
                              { text: "Payment transactions are well-documented through the issuance of official receipts and other documents.",entry: "entry.49070514" },
                              { text: "The cashier promptly acknowledges the customer's needs upon arrival.",entry: "entry.694777175" }
                                          ],
                             commentsEntry: "entry.336650484",
                            suggestionsEntry: "entry.1615297073"
                          },
              // Add more services as needed
            ].map((servicereg, serviceIndex) => (
              <div class="service-section">
                <div class="service-card">
                  <label class="service-card-header">
                    <input type="radio" name="selected-service" class="service-card-checkbox" value={servicereg.title.toLowerCase().replace(' ', '-')}>
                    <div class="service-card-icon" set:html={servicereg.icon}></div>
                    <div class="service-card-title">{servicereg.title}</div>
                  </label>
                  
                  <div class="service-questions">
                    <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg mb-4">
                      <div class="flex items-center justify-between text-xs font-medium text-gray-500 dark:text-gray-400">
                        <span>1 (Poor)</span>
                        <span>2 (Fair)</span>
                        <span>3 (Satisfactory)</span>
                        <span>4 (Very Satisfactory)</span>
                        <span>5 (Excellent)</span>
                      </div>
                    </div>
                    
                    {servicereg.questions.map((question, index) => (
                      <div class="form-group mb-6">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                          {index + 1}. {question.text}
                        </label>
                        <div class="flex items-center justify-between">
                          {[1, 2, 3, 4, 5].map((rating) => (
                            <label class="flex flex-col items-center">
                              <input 
                                type="radio" 
                                name={question.entry}
                                value={rating}
                                required
                                                                        class="h-5 w-5 text-msu-main-color dark:text-[#61063B] focus:ring-msu-main-color dark:focus:ring-[#61063B] border-gray-300 dark:border-gray-600 dark:bg-gray-700"
                              >
                              <span class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                                {rating === 1 ? 'Poor' : 
                                rating === 2 ? 'Fair' : 
                                rating === 3 ? 'Good' : 
                                rating === 4 ? 'Very Good' : 'Excellent'}
                              </span>
                            </label>
                          ))}
                        </div>
                      </div>
                    ))}
                    
                    <!-- Comments Section -->
                    <div class="pt-6 border-t border-gray-200 dark:border-gray-600">
                      <h4 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Additional Feedback</h4>
                      
                      <div class="form-group">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                          Comments
                        </label>
                        <textarea 
                          name={servicereg.commentsEntry}
                          rows="3" 
                          class="block w-full px-4 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-lg focus:ring-msu-main-color dark:focus:ring-[#61063B] focus:border-msu-main-color dark:focus:border-[#61063B]" 
                          placeholder="Share your experience or suggestions..."
                        ></textarea>
                      </div>

                      <div class="form-group">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                          Suggestions/Recommendations
                        </label>
                        <textarea 
                          name={servicereg.suggestionsEntry}
                          rows="3" 
                          class="block w-full px-4 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-lg focus:ring-msu-main-color dark:focus:ring-[#61063B] focus:border-msu-main-color dark:focus:border-[#61063B]" 
                          placeholder="How can we serve you better?"
                        ></textarea>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}

            <!-- Form Footer -->
            <div class="pt-6">
              <div class="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
                <p class="text-sm text-gray-500 dark:text-gray-400">
                  All responses are confidential and will be used for service improvement.
                </p>
                <button
                  type="submit"
                  class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-msu-main-color to-msu-maroon dark:bg-[#61063B] hover:from-msu-main-color-dark hover:to-msu-maroon-dark dark:hover:bg-[#61063B] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-msu-main-color dark:focus:ring-[#61063B] transition-all"
                >
                  Submit Survey
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </section>
</div>

<!-- Feedback Modal -->
<div id="feedbackModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <div class="modal-icon"></div>
      <h3 class="modal-title"></h3>
      <button id="modalCloseButton" class="modal-close">&times;</button>
    </div>
    <div id="modalMessage" class="modal-body"></div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize services tracking - will be populated from the actual services in the survey
  const services: Record<string, { completed: boolean; verified: boolean }> = {};

  // Tab functionality
  const tabButtons = document.querySelectorAll('.tab-btn');
  const tabContents = document.querySelectorAll('.tab-content');
  
  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      tabButtons.forEach(btn => btn.classList.remove('active'));
      tabContents.forEach(content => content.classList.remove('active'));
      
      button.classList.add('active');
      const tabId = button.getAttribute('data-tab');
      const targetTab = document.getElementById(tabId);
      if (targetTab) targetTab.classList.add('active');
      
      sessionStorage.setItem('activeTab', tabId || '');
      
      // Remove progress tracker when switching away from regular student survey
      if (tabId !== 'studentreg-survey') {
        const existingTracker = document.querySelector('.reg-progress-tracker');
        if (existingTracker) existingTracker.remove();
      }
      
      if (tabId === 'studentreg-survey') {
        initializeStudentSurveyreg();
      }
    });
  });
  
  // Set initial active tab
  const storedTab = sessionStorage.getItem('activeTab');
  if (storedTab && document.getElementById(storedTab)) {
    const tabButton = document.querySelector(`.tab-btn[data-tab="${storedTab}"]`) as HTMLElement;
    if (tabButton) tabButton.click();
  } else if (tabButtons.length > 0) {
    (tabButtons[0] as HTMLElement).click();
  }

  // Create hidden iframe for form submission
  const hiddenIframe = document.createElement('iframe');
  hiddenIframe.name = 'hidden_iframe';
  hiddenIframe.style.display = 'none';
  document.body.appendChild(hiddenIframe);

  // Initialize student survey
  function initializeStudentSurveyreg() {
    // Check internet connectivity
    function checkInternetConnectionreg() {
      return navigator.onLine;
    }

    // Initialize verification status
    function initializeVerificationStatusreg() {
      // Clear existing services
      Object.keys(services).forEach(key => delete services[key]);
      
      // Define all the services that should be in this survey
      const expectedServices = [
        'Library Services',
        'Security Services', 
        'Admission Services',
        'Guidance Services',
        'Laboratory Services',
        'Food Services',
        'Health Services',
        'Facilities Services',
        'Campus Services',
        'Registrar Services',
        'Cashiering Services'
      ];
      
      // Add only the expected 11 services to tracking
      document.querySelectorAll('.service-card').forEach(card => {
        const titleElement = card.querySelector('.service-card-title');
        if (!titleElement) return;
        
        const title = titleElement.textContent?.trim();
        if (!title) return;
        
        // Only track services that are in our expected list
        if (expectedServices.includes(title)) {
          services[title] = { completed: false, verified: false };
          updateVerificationStatus(card as HTMLElement, services[title]);
        }
      });
      
      // Debug log to verify services count
      console.log('Services initialized:', Object.keys(services).length, 'services:', Object.keys(services));
      console.log('Expected services:', expectedServices);
      console.log('Services found in survey:', Object.keys(services));
    }

    // Update verification status UI
    function updateVerificationStatus(card: HTMLElement, status: { completed: boolean; verified: boolean }) {
      const existingStatus = card.querySelector('.verification-status');
      if (existingStatus) existingStatus.remove();

      const statusIndicator = document.createElement('div');
      statusIndicator.className = 'verification-status';
      
      if (status.verified) {
        statusIndicator.classList.add('verified');
        statusIndicator.innerHTML = '✓';
        statusIndicator.title = 'Verified and submitted';
      } else if (status.completed) {
        statusIndicator.classList.add('completed');
        statusIndicator.innerHTML = '✓';
        statusIndicator.title = 'Completed (not submitted)';
      } else {
        statusIndicator.classList.add('not-completed');
        statusIndicator.innerHTML = '✕';
        statusIndicator.title = 'Not completed';
      }

      const header = card.querySelector('.service-card-header');
      if (header) header.prepend(statusIndicator);
    }

    // Validate all questions in a service card
    function validateServiceQuestions(serviceCard: HTMLElement) {
      const radioGroups = new Set<string>();
      const answeredGroups = new Set<string>();
      
      serviceCard.querySelectorAll('input[type="radio"]').forEach(radio => {
        const radioElement = radio as HTMLInputElement;
        radioGroups.add(radioElement.name);
        if (radioElement.checked) answeredGroups.add(radioElement.name);
      });
      
      return radioGroups.size === answeredGroups.size;
    }

    // Service card selection and validation
    document.querySelectorAll('.service-card').forEach(card => {
      const checkbox = card.querySelector('.service-card-checkbox');
      
      card.addEventListener('click', function(e) {
        const target = e.target as HTMLElement;
        if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.closest('.form-group')) {
          return;
        }
        
        document.querySelectorAll('.service-card').forEach(c => {
          if (c !== card) {
            c.classList.remove('selected');
            const otherCheckbox = c.querySelector('.service-card-checkbox') as HTMLInputElement;
            if (otherCheckbox) otherCheckbox.checked = false;
          }
        });
        
        card.classList.toggle('selected');
        if (checkbox) (checkbox as HTMLInputElement).checked = card.classList.contains('selected');
        
        if (card.classList.contains('selected')) {
          card.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
      });
      
      if (checkbox) {
        checkbox.addEventListener('change', function() {
          card.classList.toggle('selected', this.checked);
        });
      }
    });

    // Track radio button changes
    document.querySelectorAll('.service-questions input[type="radio"]').forEach(radio => {
      radio.addEventListener('change', function() {
        const serviceCard = this.closest('.service-card') as HTMLElement;
        if (!serviceCard) return;
        
        const titleElement = serviceCard.querySelector('.service-card-title');
        if (!titleElement) return;
        
        const title = titleElement.textContent?.trim();
        if (!title) return;
        
        // Update all services found in the survey
        if (services[title]) {
          services[title].completed = validateServiceQuestions(serviceCard);
          updateVerificationStatus(serviceCard, services[title]);
          updateRegProgressTracker();
        }
      });
    });

    // Create progress tracker for regular students
    function createRegProgressTracker() {
      // Only create tracker if we're on the regular student survey tab
      const activeTab = sessionStorage.getItem('activeTab');
      if (activeTab !== 'studentreg-survey') {
        return;
      }
      
      // Remove any existing tracker first
      const existingTracker = document.querySelector('.reg-progress-tracker');
      if (existingTracker) existingTracker.remove();
      
      // Wait for layout to be fully loaded
      const waitForLayout = () => {
        // Check if main content and survey content are loaded
        const mainContent = document.querySelector('main');
        const surveyContent = document.querySelector('#studentreg-survey');
        
        if (!mainContent || !surveyContent) {
          // If not ready, wait a bit more
          setTimeout(waitForLayout, 100);
          return;
        }
        
        // Check if page is fully rendered
        if (document.readyState !== 'complete') {
          setTimeout(waitForLayout, 100);
          return;
        }
        
        // Create tracker after layout is ready
        setTimeout(() => {
          const tracker = document.createElement('div');
          tracker.className = 'reg-progress-tracker';
          tracker.title = 'Survey completion progress';
          tracker.innerHTML = `
            <div class="reg-progress-circle">
              <svg viewBox="0 0 36 36" class="reg-progress-bg">
                <path d="M18 2.0845
                  a 15.9155 15.9155 0 0 1 0 31.831
                  a 15.9155 15.9155 0 0 1 0 -31.831"
                  fill="none"
                  stroke-dasharray="100, 100"
                />
              </svg>
              <svg viewBox="0 0 36 36" class="reg-progress-fill">
                <path d="M18 2.0845
                  a 15.9155 15.9155 0 0 1 0 31.831
                  a 15.9155 15.9155 0 0 1 0 -31.831"
                  fill="none"
                  stroke-dasharray="0, 100"
                />
              </svg>
              <div class="reg-progress-text">0%</div>
            </div>
          `;
          
          tracker.addEventListener('click', showRegProgressSummary);
          document.body.appendChild(tracker);
          
          // Add fade-in animation
          tracker.style.opacity = '0';
          tracker.style.transform = 'scale(0.8)';
          tracker.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
          
          // Force a reflow and animate in
          setTimeout(() => {
            tracker.style.opacity = '1';
            tracker.style.transform = 'scale(1)';
          }, 50);
        }, 300);
      };
      
      // Start the layout check process
      setTimeout(waitForLayout, 200);
    }

    // Update progress tracker for regular students
    function updateRegProgressTracker() {
      // Only update tracker if we're on the regular student survey tab
      const activeTab = sessionStorage.getItem('activeTab');
      if (activeTab !== 'studentreg-survey') {
        return;
      }
      
      const totalServices = Object.keys(services).length;
      const completedServices = Object.values(services).filter(s => s.completed || s.verified).length;
      const percentage = totalServices > 0 ? Math.round((completedServices / totalServices) * 100) : 0;
      
      // Debug logging
      console.log('Reg Progress Tracker Update:');
      console.log('Total services (fixed):', totalServices);
      console.log('Completed services:', completedServices);
      console.log('Percentage:', percentage);
      console.log('Services status:', services);
      console.log('All services:', Object.keys(services));
      
      const progressFill = document.querySelector('.reg-progress-fill') as HTMLElement;
      const progressText = document.querySelector('.reg-progress-text') as HTMLElement;
      
      if (progressFill && progressText) {
        progressFill.style.strokeDasharray = `${percentage}, 100`;
        progressText.textContent = `${percentage}%`;
        
        if (percentage === 100) {
          progressFill.style.stroke = '#10B981';
          progressText.style.color = '#10B981';
        } else if (percentage >= 50) {
          progressFill.style.stroke = '#3B82F6';
          progressText.style.color = '#3B82F6';
        } else {
          progressFill.style.stroke = '#1E3A8A';
          progressText.style.color = '#1E3A8A';
        }
      }
    }

    // Show progress summary for regular students
    function showRegProgressSummary() {
      const totalServices = Object.keys(services).length;
      const completedServices = Object.values(services).filter(s => s.completed && !s.verified).length;
      const verifiedServices = Object.values(services).filter(s => s.verified).length;
      const remainingServices = totalServices - completedServices - verifiedServices;
      
      // Debug logging
      console.log('Reg Progress Summary:');
      console.log('Total services (fixed):', totalServices);
      console.log('Completed (not submitted):', completedServices);
      console.log('Verified (submitted):', verifiedServices);
      console.log('Remaining:', remainingServices);
      console.log('All services:', Object.keys(services));
      
      const modal = document.getElementById('feedbackModal') as HTMLElement;
      const modalMessage = document.getElementById('modalMessage') as HTMLElement;
      const modalIcon = modal.querySelector('.modal-icon') as HTMLElement;
      const modalTitle = modal.querySelector('.modal-title') as HTMLElement;
      
      modalTitle.textContent = 'Survey Progress';
      modal.classList.remove('modal-error', 'modal-success');
      
      modalIcon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
      `;
      
      modalMessage.innerHTML = `
        <div class="space-y-3">
          <div class="flex justify-between">
            <span>Total Services:</span>
            <span class="font-medium">${totalServices}</span>
          </div>
          <div class="flex justify-between">
            <span>Completed:</span>
            <span class="font-medium text-green-600">${completedServices}</span>
          </div>
          <div class="flex justify-between">
            <span>Submitted:</span>
            <span class="font-medium text-blue-600">${verifiedServices}</span>
          </div>
          <div class="flex justify-between">
            <span>Remaining:</span>
            <span class="font-medium text-red-600">${remainingServices}</span>
          </div>
          <div class="pt-3 border-t mt-3">
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="bg-blue-600 h-2.5 rounded-full" style="width: ${Math.round(((completedServices + verifiedServices) / totalServices) * 100)}%"></div>
            </div>
          </div>
        </div>
      `;
      
      modal.classList.add('active');
      const closeButton = document.getElementById('modalCloseButton') as HTMLElement;
      if (closeButton) {
        closeButton.onclick = function() {
          modal.classList.remove('active');
        };
      }
      
      modal.onclick = function(e) {
        if (e.target === modal) {
          modal.classList.remove('active');
        }
      };
    }

    // Generate reference code
    function generateReferenceCode() {
      const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
      let result = '';
      for (let i = 0; i < 8; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return `${result.substring(0, 4)}-${result.substring(4)}`;
    }

    // Setup reference code generation
    function setupReferenceCodeGenerationreg() {
      const regcourseInput = document.querySelector('input[name="entry.938986881"]') as HTMLInputElement;
      const regyearLevelInputs = document.querySelectorAll('input[name="entry.1602134174"]') as NodeListOf<HTMLInputElement>;
      const regreferenceCodeInput = document.getElementById('regreferenceCodeInputs') as HTMLInputElement;
      const regcopyBtn = document.getElementById('regcopyReferenceCodeBtns') as HTMLElement;
      
      function regupdateReferenceCode() {
        const regcourse = regcourseInput?.value.trim();
        let regyearLevel = '';
        
        // Find the checked year level radio button
        regyearLevelInputs.forEach(input => {
          if (input.checked) {
            regyearLevel = input.value;
          }
        });
        
        if (regcourse && regyearLevel) {
          const code = generateReferenceCode();
          regreferenceCodeInput.value = code;
          regreferenceCodeInput.classList.remove('bg-gray-100');
          regreferenceCodeInput.classList.add('bg-yellow-100', 'border-yellow-300');
        } else {
          regreferenceCodeInput.value = '';
          regreferenceCodeInput.classList.add('bg-gray-100');
          regreferenceCodeInput.classList.remove('bg-yellow-100', 'border-yellow-300');
        }
      }
      
      if (regcourseInput) regcourseInput.addEventListener('input', regupdateReferenceCode);
      if (regyearLevelInputs) {
        regyearLevelInputs.forEach(input => {
          input.addEventListener('change', regupdateReferenceCode);
        });
      }
      
      if (regcopyBtn) {
        regcopyBtn.addEventListener('click', () => {
          if (regreferenceCodeInput.value) {
            regreferenceCodeInput.select();
            document.execCommand('copy');
            
            const originalHtml = regcopyBtn.innerHTML;
            regcopyBtn.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            `;
            
            setTimeout(() => {
              regcopyBtn.innerHTML = originalHtml;
            }, 2000);
          }
        });
      }
      
      // Initial update
      regupdateReferenceCode();
    }

    // Form submission handler with hidden iframe
    const surveyForm = document.querySelector('#regstudentSurveyForm') as HTMLFormElement;
    if (surveyForm) {
      let isSubmitting = false;
      
      surveyForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Prevent multiple submissions
        if (isSubmitting) {
          return;
        }
        isSubmitting = true;
        
        // Create and show enhanced process animation
        const loader = document.createElement('div');
        loader.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
        loader.innerHTML = `
          <div class="loader-container bg-white p-8 rounded-xl shadow-2xl flex flex-col items-center max-w-md mx-4">
            <!-- MSU Logo Animation -->
            <div class="loader-logo mb-6">
              <div class="w-16 h-16 bg-gradient-to-br from-msu-main-color to-msu-maroon rounded-full flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                </svg>
              </div>
            </div>
            
            <!-- Status Message -->
            <p class="text-gray-700 font-medium text-center mb-2 transition-opacity duration-300">Processing your survey submission...</p>
            <p class="text-sm text-gray-500 text-center transition-opacity duration-300">Please wait while we validate and submit your responses</p>
            
            <!-- Spinning Loader -->
            <div class="mt-4">
              <div class="loader animate-spin rounded-full h-8 w-8 border-2 border-msu-main-color border-t-transparent"></div>
            </div>
          </div>
        `;
        document.body.appendChild(loader);
        
        // Start the progress animation
        startProgressAnimation();
        
        // Disable submit button
        const submitButton = surveyForm.querySelector('button[type="submit"]') as HTMLButtonElement;
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.innerHTML = 'Submitting...';
        }
        
        // Check internet connection
        if (!checkInternetConnectionreg()) {
          stopAnimationAndShowError('No internet connection detected. Please connect to the internet to submit your survey.');
          return;
        }
        
        // Validate student info
        const regyearLevel = document.querySelector('input[name="entry.1602134174"]:checked') as HTMLInputElement;
        const regcourse = document.querySelector('input[name="entry.938986881"]') as HTMLInputElement;
        
        if (!regyearLevel) {
          stopAnimationAndShowError('Please select your year level');
          return;
        }
        
        if (!regcourse || !regcourse.value.trim()) {
          regcourse.classList.add('border-red-500');
          stopAnimationAndShowError('Please enter your course');
          return;
        }
        
        // Validate student info
        const yearLevel = document.querySelector('input[name="entry.1602134174"]:checked') as HTMLInputElement;
        const course = document.querySelector('input[name="entry.938986881"]') as HTMLInputElement;
        
        if (!yearLevel) {
          stopAnimationAndShowError('Please select your year level');
          return;
        }
        
        if (!course || !course.value.trim()) {
          course.classList.add('border-red-500');
          stopAnimationAndShowError('Please enter your course');
          return;
        }
        
        // Validate selected services
        const selectedServices = document.querySelectorAll('.service-card.selected');
        let allServicesValid = true;
        let invalidServices = [];
        
        selectedServices.forEach(card => {
          const title = (card as HTMLElement).querySelector('.service-card-title')?.textContent?.trim() || '';
          const isValid = validateServiceQuestions(card as HTMLElement);
          
          if (!isValid) {
            allServicesValid = false;
            invalidServices.push(title);
            card.classList.add('border-red-500');
          }
        });
        
        if (!allServicesValid) {
          stopAnimationAndShowError(`Please complete all questions in these services:<br><br>${invalidServices.join('<br>')}`);
          return;
        }
        
        // Prepare form data
        const formData = new FormData(surveyForm);
        
        // Create hidden form for submission
        const hiddenForm = document.createElement('form');
        hiddenForm.style.display = 'none';
        hiddenForm.method = 'POST';
        hiddenForm.action = 'https://docs.google.com/forms/u/1/d/e/1FAIpQLSdFTCUPcb915oJekigyIf5sY-ol34gIiRpLAOSOf1uouoacVw/formResponse';
        hiddenForm.target = 'hidden_iframe';
        
        formData.forEach((value, key) => {
          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = key;
          input.value = value.toString();
          hiddenForm.appendChild(input);
        });
        
        document.body.appendChild(hiddenForm);
        
        // Mark all services as verified
        Object.keys(services).forEach(service => {
          services[service].verified = true;
          services[service].completed = true;
        });
        
        updateRegProgressTracker();
        
        // Show success message with details
        const studentData = {
          regreferenceCode: (document.getElementById('regreferenceCodeInputs') as HTMLInputElement).value,
          regstudentId: (document.querySelector('input[name="entry.1609254934"]') as HTMLInputElement)?.value || 'Not provided',
          regcourse: course.value,
          regyearLevel: yearLevel.value
        };
        
        // Submit the form
        hiddenForm.submit();
        
        // Allow animation to complete before showing success message
        setTimeout(() => {
          // Remove loader before showing success message
          loader.remove();
          showSubmissionSuccess(studentData);
          
          // Remove the hidden form after submission
          setTimeout(() => {
            hiddenForm.remove();
          }, 1000);
          
          // Reset isSubmitting flag after successful submission
          // Form reset will be handled when modal is closed
          isSubmitting = false;
        }, 6000); // Wait for animation to complete
      });
    }

    // Function to reset form and clear all states
    function resetFormAndClearStates() {
      const surveyForm = document.getElementById('regstudentSurveyForm') as HTMLFormElement;
      if (surveyForm) {
        // Reset the form
        surveyForm.reset();
        
        // Clear any error styling
        const errorInputs = surveyForm.querySelectorAll('.border-red-500');
        errorInputs.forEach(input => {
          input.classList.remove('border-red-500');
        });
        
        // Clear selected service cards
        document.querySelectorAll('.service-card.selected').forEach(card => {
          card.classList.remove('selected');
          const checkbox = card.querySelector('.service-card-checkbox') as HTMLInputElement;
          if (checkbox) checkbox.checked = false;
        });
        
        // Reset verification status
        initializeVerificationStatusreg();
        updateRegProgressTracker();
        
        // Reset submit button
        const submitButton = surveyForm.querySelector('button[type="submit"]') as HTMLButtonElement;
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.innerHTML = 'Submit Survey';
        }
        
        // Reset reference code field
        const regreferenceCodeInput = document.getElementById('regreferenceCodeInputs') as HTMLInputElement;
        if (regreferenceCodeInput) {
          regreferenceCodeInput.value = '';
          regreferenceCodeInput.classList.add('bg-gray-100');
          regreferenceCodeInput.classList.remove('bg-yellow-100', 'border-yellow-300');
        }
        
        // Scroll to the top of the survey form smoothly
        setTimeout(() => {
          const surveySection = document.getElementById('studentreg-survey');
          if (surveySection) {
            surveySection.scrollIntoView({ 
              behavior: 'smooth', 
              block: 'start',
              inline: 'nearest'
            });
          } else {
            // Fallback: scroll to top of page if survey section not found
            window.scrollTo({
              top: 0,
              behavior: 'smooth'
            });
          }
        }, 200); // Small delay to ensure all DOM updates are complete
        
        console.log('Form and states reset successfully with scroll to top');
      }
    }

    // Show submission success with details
    function showSubmissionSuccess(data: { regreferenceCode: string; regstudentId: string; regcourse: string; regyearLevel: string }) {
      const modal = document.getElementById('feedbackModal') as HTMLElement;
      const modalMessage = document.getElementById('modalMessage') as HTMLElement;
      const modalIcon = modal.querySelector('.modal-icon') as HTMLElement;
      const modalTitle = modal.querySelector('.modal-title') as HTMLElement;
      
      modalTitle.textContent = 'Submission Successful';
      modalIcon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
      `;
      
      modalMessage.innerHTML = `
        <div class="space-y-4">
          <div id="receiptContent" class="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
            <div class="flex justify-between items-center mb-4">
              <h3 class="font-bold text-lg text-msu-main-color">Survey Submission Receipt</h3>
              <div class="flex items-center space-x-2">
                <span class="px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">Verified</span>
                <span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">${new Date().toLocaleDateString()}</span>
              </div>
            </div>
            <div class="grid grid-cols-1 gap-3">
              <div>
                <p class="text-sm text-gray-500">Reference Code</p>
                <p class="font-mono font-bold text-lg">${data.regreferenceCode}</p>
              </div>

              <div>
                <p class="text-sm text-gray-500">Course</p>
                <p class="font-medium">${data.regcourse}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500">Year Level</p>
                <p class="font-medium">${data.regyearLevel}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500">Submission Date</p>
                <p class="font-medium">${new Date().toLocaleString()}</p>
              </div>
            </div>
            <div class="mt-4 pt-4 border-t border-gray-200">
              <div class="flex items-center justify-center space-x-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-msu-main-color" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                <span class="text-sm text-gray-600">Thank you for your feedback submission</span>
              </div>
            </div>
          </div>
          
          <div class="bg-blue-50 rounded-lg p-4 border border-blue-100">
            <p class="text-sm text-blue-700 mb-3">Please note your reference code for future inquiries.</p>
            <button id="downloadReceiptBtn" class="w-full flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-msu-main-color to-msu-maroon hover:from-msu-main-color-dark hover:to-msu-maroon-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-msu-main-color">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
              </svg>
              Download Receipt as Image
            </button>
          </div>
        </div>
      `;
      
      modal.classList.add('active');
      
      const closeButton = document.getElementById('modalCloseButton') as HTMLElement;
      if (closeButton) {
        closeButton.onclick = function() {
          modal.classList.remove('active');
          // Reset form immediately when modal is closed
          setTimeout(() => {
            resetFormAndClearStates();
          }, 100);
        };
      }
      
      modal.onclick = function(e) {
        if (e.target === modal) {
          modal.classList.remove('active');
          // Reset form immediately when modal is closed by clicking outside
          setTimeout(() => {
            resetFormAndClearStates();
          }, 100);
        }
      };

      // Add event listener for download button
      const downloadBtn = document.getElementById('downloadReceiptBtn') as HTMLButtonElement;
      if (downloadBtn) {
        downloadBtn.addEventListener('click', function() {
          downloadReceiptAsImage();
        });
      }

      // Function to download the receipt as image
      async function downloadReceiptAsImage() {
        const downloadBtn = document.getElementById('downloadReceiptBtn') as HTMLButtonElement;
        if (!downloadBtn) return;
        
        const originalBtnContent = downloadBtn.innerHTML;
        
        // Show loading state on button
        downloadBtn.innerHTML = `
          <svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Generating Image...
        `;
        downloadBtn.disabled = true;

        try {
          // Use html2canvas library to convert the div to an image
          const html2canvas = await loadHtml2Canvas();
          const receiptElement = document.getElementById('receiptContent') as HTMLElement;
          if (!receiptElement) throw new Error('Receipt element not found');
          
          // Add some temporary styles for better screenshot
          receiptElement.style.boxShadow = 'none';
          receiptElement.style.border = '1px solid #e5e7eb';
          receiptElement.style.borderRadius = '0.5rem';
          receiptElement.style.padding = '1.5rem';
          
          const canvas = await (html2canvas as any)(receiptElement, {
            scale: 2, // Higher quality
            logging: false,
            useCORS: true,
            allowTaint: true,
            backgroundColor: '#ffffff'
          });
          
          // Create download link
          const link = document.createElement('a');
          link.download = `MSU-Survey-Receipt-${data.regreferenceCode}.jpg`;
          link.href = canvas.toDataURL('image/jpeg', 0.9);
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          
          // Show success feedback
          const modalIcon = document.querySelector('#feedbackModal .modal-icon') as HTMLElement;
          if (modalIcon) {
            modalIcon.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            `;
          }
          
          // Close modal and reset form after successful download
          setTimeout(() => {
            const modal = document.getElementById('feedbackModal') as HTMLElement;
            if (modal) {
              modal.classList.remove('active');
            }
            resetFormAndClearStates();
          }, 1500);
        } catch (error) {
          console.error('Error generating image:', error);
          // Show error feedback
          const modalIcon = document.querySelector('#feedbackModal .modal-icon') as HTMLElement;
          if (modalIcon) {
            modalIcon.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            `;
          }
        } finally {
          // Restore button state
          downloadBtn.innerHTML = originalBtnContent;
          downloadBtn.disabled = false;
        }
      }

      // Function to dynamically load html2canvas
      function loadHtml2Canvas() {
        return new Promise((resolve, reject) => {
          if ((window as any).html2canvas) {
            resolve((window as any).html2canvas);
            return;
          }
          
          const script = document.createElement('script');
          script.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js';
          script.onload = () => resolve((window as any).html2canvas);
          script.onerror = reject;
          document.head.appendChild(script);
        });
      }
    }

    // Modal control
    function showModal(type: 'success' | 'error', message: string) {
      const modal = document.getElementById('feedbackModal') as HTMLElement;
      const modalMessage = document.getElementById('modalMessage') as HTMLElement;
      const modalIcon = modal.querySelector('.modal-icon') as HTMLElement;
      const modalTitle = modal.querySelector('.modal-title') as HTMLElement;
      
      modalMessage.innerHTML = message;
      
      if (type === 'success') {
        modal.classList.remove('modal-error');
        modal.classList.add('modal-success');
        modalTitle.textContent = 'Success!';
        modalIcon.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
        `;
      } else {
        modal.classList.remove('modal-success');
        modal.classList.add('modal-error');
        modalTitle.textContent = 'Attention Required';
        modalIcon.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        `;
      }
      
      modal.classList.add('active');
      
      const closeButton = document.getElementById('modalCloseButton') as HTMLElement;
      if (closeButton) {
        closeButton.onclick = function() {
          modal.classList.remove('active');
        };
      }
      
      modal.onclick = function(e) {
        if (e.target === modal) {
          modal.classList.remove('active');
        }
      };
    }

    // Initialize the student survey
    initializeVerificationStatusreg();
    createRegProgressTracker();
    setupReferenceCodeGenerationreg();
    updateRegProgressTracker();
    
    // Log all services found in the survey
    const actualServices = Object.keys(services);
    console.log('All services found in survey:', actualServices);
    console.log('Total services count:', actualServices.length);
  }

  // Simplified status animation function
  function startProgressAnimation() {
    const statusMessage = document.querySelector('.loader-container p:first-of-type') as HTMLElement;
    const statusSubtext = document.querySelector('.loader-container p:last-of-type') as HTMLElement;
    
    const statusMessages = [
      { main: 'Validating your information...', sub: 'Checking student details and form completeness' },
      { main: 'Processing survey responses...', sub: 'Analyzing your feedback and ratings' },
      { main: 'Submitting to server...', sub: 'Sending your responses securely' },
      { main: 'Finalizing submission...', sub: 'Preparing your receipt and confirmation' }
    ];
    
    let currentStep = 0;
    
    function updateStatus() {
      currentStep++;
      
      // Update status messages
      if (statusMessages[currentStep - 1] && statusMessage && statusSubtext) {
        statusMessage.style.transition = 'opacity 0.4s ease';
        statusSubtext.style.transition = 'opacity 0.4s ease';
        statusMessage.style.opacity = '0';
        statusSubtext.style.opacity = '0';
        
        setTimeout(() => {
          if (statusMessage && statusSubtext) {
            statusMessage.textContent = statusMessages[currentStep - 1].main;
            statusSubtext.textContent = statusMessages[currentStep - 1].sub;
            statusMessage.style.opacity = '1';
            statusSubtext.style.opacity = '1';
          }
        }, 300);
      }
    }
    
    // Start status updates (faster timing for 2-second total)
    setTimeout(() => updateStatus(), 500);
    setTimeout(() => updateStatus(), 1000);
    setTimeout(() => updateStatus(), 1500);
    setTimeout(() => updateStatus(), 2000);
  }
  
  // Function to stop animation and show error
  function stopAnimationAndShowError(message: string) {
    const loader = document.querySelector('.fixed.inset-0');
    if (loader) {
      loader.remove();
    }
    
    const submitButton = document.querySelector('#regstudentSurveyForm button[type="submit"]') as HTMLButtonElement;
    if (submitButton) {
      submitButton.disabled = false;
      submitButton.innerHTML = 'Submit Survey';
    }
    
    // Reset isSubmitting flag
    const surveyForm = document.getElementById('regstudentSurveyForm') as HTMLFormElement;
    if (surveyForm) {
      (surveyForm as any).isSubmitting = false;
    }
    
    // Clear any error styling from previous attempts
    const errorInputs = document.querySelectorAll('.border-red-500');
    errorInputs.forEach(input => {
      input.classList.remove('border-red-500');
    });
    
    showModal('error', message);
  }

  // Modal control function
  function showModal(type: 'success' | 'error', message: string) {
    const modal = document.getElementById('feedbackModal') as HTMLElement;
    const modalMessage = document.getElementById('modalMessage') as HTMLElement;
    const modalIcon = modal.querySelector('.modal-icon') as HTMLElement;
    const modalTitle = modal.querySelector('.modal-title') as HTMLElement;
    
    modalMessage.innerHTML = message;
    
    if (type === 'success') {
      modal.classList.remove('modal-error');
      modal.classList.add('modal-success');
      modalTitle.textContent = 'Success!';
      modalIcon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
      `;
    } else {
      modal.classList.remove('modal-success');
      modal.classList.add('modal-error');
      modalTitle.textContent = 'Attention Required';
      modalIcon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
      `;
    }
    
    modal.classList.add('active');
    
    const closeButton = document.getElementById('modalCloseButton') as HTMLElement;
    if (closeButton) {
      closeButton.onclick = function() {
        modal.classList.remove('active');
      };
    }
    
    modal.onclick = function(e) {
      if (e.target === modal) {
        modal.classList.remove('active');
      }
    };
  }

  // Add connectivity status monitoring
  window.addEventListener('online', () => {
    console.log('Internet connection restored');
  });

  window.addEventListener('offline', () => {
    showModal('error', 'Internet connection lost. Please reconnect to submit your survey.');
  });

  // Add styles
  const style = document.createElement('style');
  style.textContent = `
    .service-card {
      border: 1px solid #e5e7eb;
      border-radius: 0.75rem;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      transition: all 0.3s ease;
      position: relative;
    }
    .dark .service-card {
      border-color: #374151;
      background-color: #1f2937;
    }
    .service-card.selected {
      border-color: #1a4b8c;
      box-shadow: 0 0 0 3px rgba(26, 75, 140, 0.1);
    }
    .dark .service-card.selected {
      border-color: #eab308;
      box-shadow: 0 0 0 3px rgba(234, 179, 8, 0.1);
    }
    .service-card-header {
      display: flex;
      align-items: center;
      cursor: pointer;
      margin-bottom: 1rem;
    }
    .service-card-icon {
      margin-right: 1rem;
      color: #1a4b8c;
    }
    .dark .service-card-icon {
      color: #eab308;
    }
    .service-card-title {
      font-weight: 600;
      font-size: 1.125rem;
      color: #111827;
    }
    .dark .service-card-title {
      color: #e5e7eb;
    }
    .service-card-checkbox {
      margin-right: 0.75rem;
    }
    .verification-status {
      width: 1.5rem;
      height: 1.5rem;
      border-radius: 9999px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 0.75rem;
      font-weight: bold;
      font-size: 0.875rem;
    }
    .verification-status.verified {
      background-color: #10B981;
      color: white;
    }
    .verification-status.completed {
      background-color: #3B82F6;
      color: white;
    }
    .verification-status.not-completed {
      background-color: #EF4444;
      color: white;
    }
    .verification-legend {
      display: flex;
      gap: 1rem;
      justify-content: center;
      margin-bottom: 1.5rem;
      flex-wrap: wrap;
    }
    .verification-legend-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.875rem;
      color: #4B5563;
    }
    .dark .verification-legend-item {
      color: #9CA3AF;
    }
    .verification-legend-badge {
      width: 1.25rem;
      height: 1.25rem;
      border-radius: 9999px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.75rem;
      font-weight: bold;
    }
    .verification-legend-badge.verified {
      background-color: #10B981;
      color: white;
    }
    .verification-legend-badge.completed {
      background-color: #3B82F6;
      color: white;
    }
    .verification-legend-badge.not-completed {
      background-color: #EF4444;
      color: white;
    }
    .modal {
      display: none;
      position: fixed;
      z-index: 50;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.4);
    }
    .modal.active {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .modal-content {
      background-color: #fefefe;
      margin: auto;
      padding: 1.5rem;
      border: 1px solid #888;
      width: 90%;
      max-width: 500px;
      border-radius: 0.5rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    .dark .modal-content {
      background-color: #1f2937;
      border-color: #374151;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.4), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
    }
    .modal-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 1rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #e5e7eb;
    }
    .dark .modal-header {
      border-bottom-color: #374151;
    }
    .modal-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: #111827;
      margin: 0;
    }
    .dark .modal-title {
      color: #e5e7eb;
    }
    .modal-icon {
      width: 2rem;
      height: 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 0.75rem;
    }
    .modal-close {
      color: #9ca3af;
      font-size: 1.5rem;
      font-weight: bold;
      background: none;
      border: none;
      cursor: pointer;
    }
    .modal-close:hover {
      color: #6b7280;
    }
    .dark .modal-close:hover {
      color: #9ca3af;
    }
    .modal-body {
      color: #4b5563;
      line-height: 1.5;
    }
    .dark .modal-body {
      color: #d1d5db;
    }
    .modal-success {
      border-left: 4px solid #10B981;
    }
    .modal-error {
      border-left: 4px solid #EF4444;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .animate-spin {
      animation: spin 1s linear infinite;
    }
    .loader {
      border-top-color: #1a4b8c;
      border-right-color: #1a4b8c;
      border-bottom-color: #8b1a1a;
      border-left-color: #d4af37;
      animation-timing-function: cubic-bezier(0.53, 0.21, 0.29, 0.67);
    }
    .reg-progress-tracker {
      position: fixed;
      bottom: 2rem;
      left: 2rem;
      width: 4rem;
      height: 4rem;
      cursor: pointer;
      z-index: 9999;
      background: white;
      border-radius: 50%;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15), 0 4px 10px rgba(0, 0, 0, 0.1);
      display: flex;
      align-items: center;
      justify-content: center;
      /* Ensure it shows in front */
      pointer-events: auto;
      /* Create new stacking context */
      isolation: isolate;
      /* Add glow effect to make it more visible */
      filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.3));
    }
    .dark .reg-progress-tracker {
      background: #374151;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3), 0 4px 10px rgba(0, 0, 0, 0.2);
      filter: drop-shadow(0 0 10px rgba(0, 0, 0, 0.3));
    }
    .reg-progress-circle {
      position: relative;
      width: 100%;
      height: 100%;
    }
    .reg-progress-bg, .reg-progress-fill {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
    }
    .reg-progress-bg path {
      stroke: #e5e7eb;
      stroke-width: 3;
    }
    .dark .reg-progress-bg path {
      stroke: #4b5563;
    }
    .reg-progress-fill path {
      stroke: #1a4b8c;
      stroke-width: 3;
      stroke-linecap: round;
      transition: stroke-dasharray 0.6s ease;
    }
    .dark .reg-progress-fill path {
      stroke: #eab308;
    }
    .reg-progress-text {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 0.875rem;
      font-weight: bold;
      color: #1a4b8c;
    }
    .dark .reg-progress-text {
      color: white;
    }
    .missing-question {
      animation: pulse 1.5s ease-in-out infinite;
      background-color: rgba(239, 68, 68, 0.1);
      border-radius: 0.5rem;
      padding: 0.5rem;
    }
    @keyframes pulse {
      0% { background-color: rgba(239, 68, 68, 0.1); }
      50% { background-color: rgba(239, 68, 68, 0.3); }
      100% { background-color: rgba(239, 68, 68, 0.1); }
    }
    .font-mono {
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    }
    @keyframes highlight-pulse {
      0% { background-color: rgba(234, 179, 8, 0.2); }
      50% { background-color: rgba(234, 179, 8, 0.4); }
      100% { background-color: rgba(234, 179, 8, 0.2); }
    }
    .bg-yellow-100 {
      background-color: rgba(254, 243, 199, 1);
      animation: highlight-pulse 2s ease-in-out infinite;
    }
    iframe[name="hidden_iframe"] {
      display: none;
    }
    /* Enhanced Loader Styles */
    .loader-container {
      min-width: 320px;
      max-width: 90%;
      transition: all 0.3s ease;
      animation: slideIn 0.5s ease-out;
    }
    .dark .loader-container {
      background-color: #1f2937;
      color: #e5e7eb;
    }
    
    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(20px) scale(0.95);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }
    
    .loader {
      border-top-color: #1a4b8c;
      border-right-color: #1a4b8c;
      border-bottom-color: #8b1a1a;
      border-left-color: #d4af37;
      animation-timing-function: cubic-bezier(0.53, 0.21, 0.29, 0.67);
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .animate-spin {
      animation: spin 1.2s linear infinite;
    }
    
    .progress-bar {
      transition: width 0.8s ease;
      background: linear-gradient(90deg, #1a4b8c 0%, #8b1a1a 50%, #d4af37 100%);
    }
    
    .loader-logo {
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.05); opacity: 0.9; }
      100% { transform: scale(1); opacity: 1; }
    }
    
          button[disabled] {
        opacity: 0.7;
        cursor: not-allowed;
      }
      
      /* Force white text in dark mode for all inputs */
      .dark input[type="text"],
      .dark input[type="email"],
      .dark input[type="number"],
      .dark input[type="tel"],
      .dark input[type="url"],
      .dark input[type="password"],
      .dark input[type="search"],
      .dark textarea {
        color: white !important;
      }
      
      /* Force white text for autofill in dark mode */
      .dark input:-webkit-autofill,
      .dark input:-webkit-autofill:hover,
      .dark input:-webkit-autofill:focus,
      .dark input:-webkit-autofill:active {
        -webkit-text-fill-color: white !important;
        -webkit-box-shadow: 0 0 0 30px #374151 inset !important;
      }
      
      /* Force white text for placeholder in dark mode */
      .dark input::placeholder,
      .dark textarea::placeholder {
        color: #9ca3af !important;
      }
  `;
  document.head.appendChild(style);
});
</script>